{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T09:42:25.724Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T09:40:56.191Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"网络流选讲","uid":"005d78720b9e835a238af502516610c0","slug":"网络流选讲","date":"2021-09-16T09:40:18.000Z","updated":"2021-09-16T09:40:30.256Z","comments":true,"path":"api/articles/网络流选讲.json","keywords":null,"cover":null,"text":"网络流选讲网络流定义 一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量 $S \\in S’,T \\notin S’$​​,$E’ = (u,v) | u \\in S’,v \\notin S $​​​​ 最大流量 = 最小割 Ford-...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"优化技巧","uid":"e2573f345f8e369bd93647303f895691","slug":"优化技巧","date":"2021-09-16T09:39:54.000Z","updated":"2021-09-16T09:40:02.323Z","comments":true,"path":"api/articles/优化技巧.json","keywords":null,"cover":null,"text":"DP优化 $f_i = min_{i - l &lt; j &lt; i}(f_j + p_j) + p_i$​​ 使用单调队列优化 $f_i = sum_{i - l &lt; j &lt; i}(f_j + p_j) + p_i$ 使用前缀和优化 $f_i = min_{i ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DP","uid":"25ed3aa3446c2c64cf6228f9f4e4f9c4","slug":"DP","date":"2021-09-16T09:38:51.000Z","updated":"2021-09-16T09:39:37.419Z","comments":true,"path":"api/articles/DP.json","keywords":null,"cover":null,"text":"DPpart1.动态规划的核心概念 状态 转移方程 初始化 实例揭秘本质—斐波那契数列 $众所周知 斐波那契数列的的递推式是:$ $f_i = f_{i-1} + f_{i-1}(i \\ge 2)$​ $问题来了，如何来求$$f_n$? $这个时候就要用到f_i = f_{i-1...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"生成函数的运算与组合数计数问题.md","uid":"ec60c99e46e2ba013a49cda28261b89b","slug":"生成函数的运算与组合数计数问题-md","date":"2021-09-16T09:32:38.000Z","updated":"2021-09-16T09:34:13.303Z","comments":true,"path":"api/articles/生成函数的运算与组合数计数问题-md.json","keywords":null,"cover":[],"text":"生成函数的运算与组合数计数问题摘要 ​ 本文介绍了处理形式幂级数的一些高效算法，并在生成函数的运算过程中加以应用，从而解决一系列组合计数问题。 目录$1$.引言 $2$.多项式与形式幂级数 ​ $2.1$ 多项式 ​ $2.2$ 多项式的基本运算 ​ $2.3$ 形式幂级数 $3...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2021-09-16T08:56:10.901Z","updated":"2021-09-16T08:56:10.901Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":0,"tags":0,"word_count":"24k","post_count":7}