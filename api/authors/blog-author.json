{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"素数筛","uid":"bf5652b06f25669829372da351ef6ae7","slug":"素数筛","date":"2021-09-16T12:49:29.000Z","updated":"2021-09-16T12:49:47.578Z","comments":true,"path":"api/articles/素数筛.json","keywords":null,"cover":null,"text":"素数筛素数概念:学素数筛之前,我们要先引入素数的概念,那么,何为素数: 除了1和自身之外,没有其他约数的数称为素数(也叫质数) 有其他约数的数称为合数 特别的1既不是质数,也不是合数 判定:那么我们来思考,如何判断一个数是否是质数 自然我们可以枚举从小到大每个数看看能否被整除,复...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"素数","slug":"素数","count":1,"path":"api/tags/素数.json"},{"name":"筛法","slug":"筛法","count":1,"path":"api/tags/筛法.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"矩阵","uid":"1109bb51ef1fe7597b5b03d20a7a9ddd","slug":"矩阵","date":"2021-09-16T12:48:18.000Z","updated":"2021-09-16T12:49:11.723Z","comments":true,"path":"api/articles/矩阵.json","keywords":null,"cover":null,"text":"在学习矩阵之前我们需要学习快速幂运算 快速幂前言快速幂的作用就是求$x^y$的值 思想也非常简单以前我们的$pow$函数时间复杂度为$O(y)$的这个函数是通过每次的乘法运算实现的例如:$x^{37}$ = $x \\cdot x \\cdot x \\cdot x \\cdot x …...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"},{"name":"快速幂","slug":"快速幂","count":1,"path":"api/tags/快速幂.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"生成树问题","uid":"650830902f7d1f1c6412622da735e342","slug":"生成树问题","date":"2021-09-16T12:47:44.000Z","updated":"2021-09-16T12:47:59.950Z","comments":true,"path":"api/articles/生成树问题.json","keywords":null,"cover":[],"text":"定义:给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树求最小生成树的解决方法思路: 我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2 那么我们来思考,最小生成树中是否一定包含权值最小的那一条边 答案是,一定...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最小生成树","slug":"最小生成树","count":1,"path":"api/tags/最小生成树.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"最近公共祖先","uid":"4c36a9d56d2b10957f85952e1a221749","slug":"最近公共祖先","date":"2021-09-16T12:46:49.000Z","updated":"2021-09-16T12:52:13.195Z","comments":true,"path":"api/articles/最近公共祖先.json","keywords":null,"cover":[],"text":"最近公共祖先概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点) 例:6和7的LCA是2，3和7的LCA是1 LCA的求法:1.暴力让他们一步步向上找//处理出now所有儿子节点...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"倍增","slug":"倍增","count":1,"path":"api/tags/倍增.json"},{"name":"LCA","slug":"LCA","count":1,"path":"api/tags/LCA.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"最短路径问题","uid":"665dc3c56673e4afdc879c20d4cbcde8","slug":"最短路径问题","date":"2021-09-16T12:44:06.000Z","updated":"2021-09-16T12:46:12.290Z","comments":true,"path":"api/articles/最短路径问题.json","keywords":null,"cover":null,"text":"最短路径问题最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。 松弛操作在讲松弛操作之前，我们要先明确一个事实 那就是在计算两点间的最短路时，通常不仅仅会算出两点间的最短路，而会把许多点之间的最短路一同算出来 那…… 这是为什么呐...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最短路","slug":"最短路","count":1,"path":"api/tags/最短路.json"},{"name":"Dijkstra","slug":"Dijkstra","count":1,"path":"api/tags/Dijkstra.json"},{"name":"SPFA","slug":"SPFA","count":1,"path":"api/tags/SPFA.json"},{"name":"Bellman-Ford","slug":"Bellman-Ford","count":1,"path":"api/tags/Bellman-Ford.json"},{"name":"三角不等式","slug":"三角不等式","count":1,"path":"api/tags/三角不等式.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"扩展欧几里得","uid":"efce904e2fde083966eb57ba4b88b825","slug":"扩展欧几里得","date":"2021-09-16T12:43:04.000Z","updated":"2021-09-16T12:43:24.083Z","comments":true,"path":"api/articles/扩展欧几里得.json","keywords":null,"cover":null,"text":"扩展欧几里得算法概况我们之前讲的gcd算法叫做欧几里得算法，下面介绍拓展欧几里得算法(Extended Euclidean algorithm,EXGCD),从它的名字就可以看出来，它是欧几里得算法的拓展。扩欧算法求的是二元一次不定方程$ax + by = gcd(a,b)$的一...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"拓展欧几里得","slug":"拓展欧几里得","count":1,"path":"api/tags/拓展欧几里得.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"基础数据结构","uid":"7ff326fdf142ec1868a8e7b87c57157c","slug":"基础数据结构","date":"2021-09-16T12:40:16.000Z","updated":"2021-09-16T12:41:19.043Z","comments":true,"path":"api/articles/基础数据结构.json","keywords":null,"cover":null,"text":"基础数据结构链表:因为数组的插入和删除很慢，所以我们引入了链表这个概念,那么链表是什么样的一个数据结构呢? 定义:每一个元素都有箭头指向下一个元素,同理每一个元素都有箭头指向上一个元素,即 依靠箭头把n个数连接起来的一个数据结构 代码实现(包括插入和删除) cpp //核心代码 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"},{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":1,"path":"api/tags/队列.json"},{"name":"STL","slug":"STL","count":1,"path":"api/tags/STL.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"},{"name":"二叉树","slug":"二叉树","count":1,"path":"api/tags/二叉树.json"},{"name":"堆","slug":"堆","count":1,"path":"api/tags/堆.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"图论基础","uid":"2205e815a910486f8a5ae632a2606305","slug":"图论基础","date":"2021-09-16T12:38:58.000Z","updated":"2021-09-16T12:39:29.966Z","comments":true,"path":"api/articles/图论基础.json","keywords":null,"cover":[],"text":"图论基础图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set). 有向图: 可以从1→2，但不可以从2→1 无向图: 可以从1→2，也可以从2→1 有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"前缀和与差分","uid":"f65c2271ed43cdf14e2eea3c0c440d44","slug":"前缀和与差分","date":"2021-09-16T12:34:33.000Z","updated":"2021-09-16T12:38:37.371Z","comments":true,"path":"api/articles/前缀和与差分.json","keywords":null,"cover":null,"text":"前缀和问题引入给定n个数a1,a2,a3,……an,有m次询问操作,给定l和r,求al ~ ar的和为多少要想求这个问题,我们需要知道a的前缀和为多少 $我们令b_1 = a_1,b_2 = a_1 + a_2,b_3 = a_1 + a_2 + a_3,……b_k = a_1 ...","link":"","photos":[],"count_time":{"symbolsCount":902,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"},{"name":"差分","slug":"差分","count":1,"path":"api/tags/差分.json"},{"name":"小技巧","slug":"小技巧","count":1,"path":"api/tags/小技巧.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2021-09-16T12:33:01.000Z","updated":"2021-09-16T12:33:28.060Z","comments":true,"path":"api/articles/二分.json","keywords":null,"cover":null,"text":"二分的思想 给定一个单调的函数/数组 给定一个值，求这个值是否存在 或者找到这个值应当存在的位置 如果想要使用二分的话,那么给定的数组/函数,必须是经过排序的,也就是sort。 由于数组是有序的，我们可以认为它是单调递增的 假设$A_i &gt; x$,则必然有$\\forall ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"二分查找","slug":"二分查找","count":1,"path":"api/tags/二分查找.json"},{"name":"二分答案","slug":"二分答案","count":1,"path":"api/tags/二分答案.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"2020.11.4联考题解","uid":"eecca6179b73e75222042654664d0e18","slug":"2020-11-4联考题解","date":"2021-09-16T12:31:33.000Z","updated":"2021-09-16T12:32:11.365Z","comments":true,"path":"api/articles/2020-11-4联考题解.json","keywords":null,"cover":[],"text":"A(1s,512MB)题面题目背景 因为出题人不是标题党所以就用A当题目名字了$……$ 题目描述 小$m$来到了一个神奇的城市,他得到了一本书.这本书十分的神奇,它有无限的页数,每一页最多能写下$m$个单词(无论一个单词有多长).而小$m$有写日记的好习惯,他想在这本书上连续写$...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"题解","slug":"题解","count":1,"path":"api/tags/题解.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T12:28:37.471Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T12:28:13.259Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"强连通分量","slug":"强连通分量","count":1,"path":"api/tags/强连通分量.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"网络流选讲","uid":"005d78720b9e835a238af502516610c0","slug":"网络流选讲","date":"2021-09-16T09:40:18.000Z","updated":"2021-09-16T12:28:07.781Z","comments":true,"path":"api/articles/网络流选讲.json","keywords":null,"cover":null,"text":"网络流选讲网络流定义 一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量 $S \\in S’,T \\notin S’$​​,$E’ = (u,v) | u \\in S’,v \\notin S $​​​​ 最大流量 = 最小割 Ford-...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"网络流","slug":"网络流","count":1,"path":"api/tags/网络流.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"优化技巧","uid":"e2573f345f8e369bd93647303f895691","slug":"优化技巧","date":"2021-09-16T09:39:54.000Z","updated":"2021-09-16T12:28:25.303Z","comments":true,"path":"api/articles/优化技巧.json","keywords":null,"cover":null,"text":"DP优化 $f_i = min_{i - l &lt; j &lt; i}(f_j + p_j) + p_i$​​ 使用单调队列优化 $f_i = sum_{i - l &lt; j &lt; i}(f_j + p_j) + p_i$ 使用前缀和优化 $f_i = min_{i ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"DP","slug":"DP","count":2,"path":"api/tags/DP.json"},{"name":"动态规划","slug":"动态规划","count":2,"path":"api/tags/动态规划.json"},{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"DP优化","slug":"DP优化","count":1,"path":"api/tags/DP优化.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DP","uid":"25ed3aa3446c2c64cf6228f9f4e4f9c4","slug":"DP","date":"2021-09-16T09:38:51.000Z","updated":"2021-09-16T12:28:18.110Z","comments":true,"path":"api/articles/DP.json","keywords":null,"cover":null,"text":"DPpart1.动态规划的核心概念 状态 转移方程 初始化 实例揭秘本质—斐波那契数列 $众所周知 斐波那契数列的的递推式是:$ $f_i = f_{i-1} + f_{i-1}(i \\ge 2)$​ $问题来了，如何来求$$f_n$? $这个时候就要用到f_i = f_{i-1...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"DP","slug":"DP","count":2,"path":"api/tags/DP.json"},{"name":"动态规划","slug":"动态规划","count":2,"path":"api/tags/动态规划.json"},{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"生成函数的运算与组合数计数问题.md","uid":"ec60c99e46e2ba013a49cda28261b89b","slug":"生成函数的运算与组合数计数问题","date":"2021-09-16T09:32:38.000Z","updated":"2021-09-16T12:26:39.642Z","comments":true,"path":"api/articles/生成函数的运算与组合数计数问题.json","keywords":null,"cover":[],"text":"生成函数的运算与组合数计数问题摘要 ​ 本文介绍了处理形式幂级数的一些高效算法，并在生成函数的运算过程中加以应用，从而解决一系列组合计数问题。 目录$1$.引言 $2$.多项式与形式幂级数 ​ $2.1$ 多项式 ​ $2.2$ 多项式的基本运算 ​ $2.3$ 形式幂级数 $3...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"生成函数","slug":"生成函数","count":1,"path":"api/tags/生成函数.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":0,"tags":0,"word_count":"57k","post_count":17}