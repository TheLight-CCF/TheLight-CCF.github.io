{"title":"矩阵","uid":"1109bb51ef1fe7597b5b03d20a7a9ddd","slug":"矩阵","date":"2021-09-16T12:48:18.000Z","updated":"2021-09-16T13:26:08.838Z","comments":true,"path":"api/articles/矩阵.json","keywords":null,"cover":null,"content":"<p>在学习矩阵之前我们需要学习快速幂运算</p>\n<h2 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>快速幂的作用就是求$x^y$的值</p>\n<p>思想也非常简单以前我们的$pow$函数时间复杂度为$O(y)$的这个函数是通过每次的乘法运算实现的例如:$x^{37}$ = $x \\cdot x \\cdot x \\cdot x \\cdot x …… \\cdot x$进行x的三十七次乘法运算,这样时间复杂度显然不优</p>\n<span id=\"more\"></span>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h3><p>而快速幂的思想是将$x^{37}$分成$(x^{18})^2\\cdot x$再分成$((x^9)^2)^2\\cdot x$再分成$(((x^4)^2 \\cdot x)^2)^2\\cdot x$一直这样分下去,显然这样时间复杂度就被降到了$O(log y)$,这样的代码也非常的好实现</p>\n<p>代码:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//O(y)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//如果指数为0时,结果是1</span>\n    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//递归</span>\n    v <span class=\"token operator\">=</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> v <span class=\"token operator\">*</span> v<span class=\"token comment\">//有可能会爆int所以1ll*强制类型转换一下</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> v <span class=\"token operator\">=</span> v <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span><span class=\"token comment\">//奇数需要多乘一个x</span>\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">//返回值</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看得出来这个算法还有一些地方算的挺慢的,那么我们可以通过位运算来优化这个函数</p>\n<p>$\\frac{y}{2}$可以理解为:y的二进制数向左移$1$位</p>\n<p>$y$ % $2$可以理解为将$y$分解为二进制的每一位为$a_1,a_2,a_3,……,a_n$,而$y$%$2$最后的值只有0和1两个数,当y%2为0的时候是偶数,否则是奇数。我们通过进一步研究可以发现$y$%$2$与$a_n$是相等也就是$y$%$2$就相当于$y$的二进制位的个位;$y$%$2\\ne 0$也就是相当于$y$&amp;$1$</p>\n<p>通过这些位运算我们可以把时间复杂度降低到$O(log y)$</p>\n<p>代码:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//时间复杂度O(log y)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> v <span class=\"token operator\">*</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> v <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>矩阵是高等数学中常用的一个代数工具,在OI中也非常常见。</p>\n<p>所谓的矩阵就是一个n行m列的数表</p>\n<script type=\"math/tex; mode=display\">\\begin{pmatrix}\n    a_{11} & a_{12} & …… & a_{1m} \\\\\n    a_{21} & a_{22} & …… & a_{2m} \\\\\n    …… & …… & …… & …… \\\\\n    a_{n1} & a_{n2} & …… & a_{nm} \\\\\n\\end{pmatrix}</script><p>像这样一个$n\\times m$的东西,我们就把他叫做一个$n \\times m$的矩阵。实际上,我们可以把矩阵理解为一个$n \\cdot m$的二位数组</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>那么矩阵能干嘛呢？我们接下来引入矩阵的运算法则</p>\n<h4 id=\"加减法\"><a href=\"#加减法\" class=\"headerlink\" title=\"加减法\"></a>加减法</h4><p>例如这里有两个$n \\times m$的矩阵:A和B</p>\n<script type=\"math/tex; mode=display\">\\begin{pmatrix}\n        a_{11} & …… & a_{1m} \\\\\n        a_{n1} & …… & a_{nm} \\\\\n\\end{pmatrix}</script><script type=\"math/tex; mode=display\">\\begin{pmatrix}\n    b_{11} & …… & b_{1m} \\\\\n    b_{n1} & …… & b_{nm} \\\\\n\\end{pmatrix}</script><script type=\"math/tex; mode=display\">A \\pm B = \\begin{pmatrix}\n    a_{11} \\pm b_{11} & a_{12} \\pm b_{12} & …… & a_{1m} \\pm b_{1m} \\\\\n    …… & …… & …… & …… & \\\\\n    a_{n1} \\pm b_{n1} & a_{n2} \\pm b_{n2} & …… & a_{nm} \\pm b_{nm}  \n\\end{pmatrix}</script><h4 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h4><p>我们有一个大小为$n \\times m$的矩阵A,还有一个大小为$m \\times k$列的矩阵(只有第一个矩阵 = 第二个矩阵的行数的时候才能进行矩阵乘法)</p>\n<script type=\"math/tex; mode=display\">A(n\\times m) \\times B(m \\times k) = C(n \\times k)</script><p>例如:</p>\n<p>这里有一个$2 \\times 2$的矩阵A和一个$2 \\times 3$矩阵B</p>\n<script type=\"math/tex; mode=display\">\\begin{bmatrix}\n    1 & 2\\\\\n    3 & 4 \\\\\n\\end{bmatrix}\n\\times \\begin{bmatrix}\n    1 & 2 & 3 \\\\\n    2 & 3 & 3 \\\\\n\\end{bmatrix}</script><p>那么矩阵C的i行j列的求法就是:取出A的第i行，取出B的第j列，假设这i行和j列的数字数目都为m,然后我们把这m个数对应相乘，然后再对它求一个和就是矩阵这个位置的值<br>矩阵C的值就等于:</p>\n<script type=\"math/tex; mode=display\">C = \\begin{bmatrix}\n    5 & 8 & 9 \\\\\n    11 & 18 & 21 \\\\\n\\end{bmatrix}</script><h5 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质:\"></a>性质:</h5><p>1.不具有交换律</p>\n<p>$A \\times B \\ne B \\times A$</p>\n<p>2.有结合律</p>\n<p>$(A \\cdot B) \\cdot C = A \\cdot (B \\cdot C)$</p>\n<p>3.有分配律(左、右)</p>\n<p>左分配律:$A\\cdot(B \\pm C) = A \\cdot B \\pm A \\cdot C$</p>\n<p>右分配律:$(A \\pm B) \\cdot C = A\\cdot C \\pm B\\cdot C$</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>看完了矩阵的定义和运算,自然而然有一个问题——矩阵有什么用？</p>\n<h4 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h4><p>有一个数列$f$,其中$f_0 = 0；f_1 = 1；i \\ge 2；f_i = f_{i - 1} + f_{i - 2}$</p>\n<p>把这个数列写出来就是$0、1、1、2、3、5、8、13、21、34、55、89、……$</p>\n<p>现在的问题是给出一个$n$,我希望求斐波那契数列的第$n$项对$1e9+7$取模的答案</p>\n<p>很容易想到纯暴力的方法的复杂度为$O(n)$即暴力求出f数列每一个位置的值</p>\n<p>可是如果n的范围扩大到$10^18$呢,那么我们就需要用到矩阵乘法来进行这个运算</p>\n<p>那么我们怎么来算呢:</p>\n<script type=\"math/tex; mode=display\">我们可以先定义一个1\\times 2 的矩阵A里面存放：\n\\begin{bmatrix}\n    f_i & f_{i-1}\\\\\n\\end{bmatrix}</script><script type=\"math/tex; mode=display\">再定义一个2 \\times 2的矩阵B里面存放\\begin{bmatrix}\n    1 & 1 \\\\\n    1 & 0 \\\\ \n\\end{bmatrix}</script><script type=\"math/tex; mode=display\">那么A \\times B得到的矩阵C就是\\begin{bmatrix}\n    f_i + f_{i - 1} & f_i\\\\\n\\end{bmatrix} 即:\\begin{bmatrix}\n    f_{i+1} & f_i \\\\\n\\end{bmatrix}</script><p>代码实现:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n\nll n<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">matrix</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>n <span class=\"token operator\">=</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmatrix <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>matrix x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> matrix <span class=\"token operator\">&amp;</span>m1<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> matrix <span class=\"token operator\">&amp;</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//O(8)</span>\n    matrix m3<span class=\"token punctuation\">;</span>\n    m3<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span> m3<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> m2<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m3<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//选择矩阵A的行</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> m3<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//选择矩阵B的列</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;=</span> m1<span class=\"token punctuation\">.</span>m<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//枚举每一行的m个数字</span>\n                m3<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m3<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> m1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> m2<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> m3<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>ios<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> p<span class=\"token punctuation\">;</span>\n    matrix A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">;</span>\n    A<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    B<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>B<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    A<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>A<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    B<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>B<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    B<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>B<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>B<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>B<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    A <span class=\"token operator\">=</span> A <span class=\"token operator\">*</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//O(logn)</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> A<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>w <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">&lt;</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">></span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span>w <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>s <span class=\"token operator\">=</span> s<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>ch<span class=\"token operator\">-</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>ch <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> s <span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmatrix <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>matrix x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//O(logn)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        matrix z<span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> z<span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> z<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            z<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    matrix v <span class=\"token operator\">=</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span>  v <span class=\"token operator\">*</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> v <span class=\"token operator\">=</span> v <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h2>","feature":true,"text":"在学习矩阵之前我们需要学习快速幂运算 快速幂前言快速幂的作用就是求$x^y$的值 思想也非常简单以前我们的$pow$函数时间复杂度为$O(y)$的这个函数是通过每次的乘法运算实现的例如:$x^{37}$ = $x \\cdot x \\cdot x \\cdot x \\cdot x …...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"},{"name":"快速幂","slug":"快速幂","count":1,"path":"api/tags/快速幂.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%B9%82\"><span class=\"toc-text\">快速幂</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理:</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E9%98%B5\"><span class=\"toc-text\">矩阵</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">加减法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%98%E6%B3%95\"><span class=\"toc-text\">乘法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">性质:</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span class=\"toc-text\">斐波那契数列</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#The-End\"><span class=\"toc-text\">The End</span></a></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}},"mapped":true,"prev_post":{"title":"素数筛","uid":"bf5652b06f25669829372da351ef6ae7","slug":"素数筛","date":"2021-09-16T12:49:29.000Z","updated":"2021-09-16T13:26:25.453Z","comments":true,"path":"api/articles/素数筛.json","keywords":null,"cover":null,"text":"素数筛素数概念:学素数筛之前,我们要先引入素数的概念,那么,何为素数: 除了1和自身之外,没有其他约数的数称为素数(也叫质数) 有其他约数的数称为合数 特别的1既不是质数,也不是合数 判定:那么我们来思考,如何判断一个数是否是质数 自然我们可以枚举从小到大每个数看看能否被整除,复...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"素数","slug":"素数","count":1,"path":"api/tags/素数.json"},{"name":"筛法","slug":"筛法","count":1,"path":"api/tags/筛法.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}},"feature":true},"next_post":{"title":"生成树问题","uid":"650830902f7d1f1c6412622da735e342","slug":"生成树问题","date":"2021-09-16T12:47:44.000Z","updated":"2021-09-16T13:26:21.654Z","comments":true,"path":"api/articles/生成树问题.json","keywords":null,"cover":[],"text":"定义:给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树求最小生成树的解决方法思路: 我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2 那么我们来思考,最小生成树中是否一定包含权值最小的那一条边 答案是,一定...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最小生成树","slug":"最小生成树","count":1,"path":"api/tags/最小生成树.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}},"feature":true}}