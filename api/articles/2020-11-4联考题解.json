{"title":"2020.11.4联考题解","uid":"eecca6179b73e75222042654664d0e18","slug":"2020-11-4联考题解","date":"2021-09-16T12:31:33.000Z","updated":"2021-09-16T12:32:11.365Z","comments":true,"path":"api/articles/2020-11-4联考题解.json","keywords":null,"cover":[],"content":"<h1 id=\"A-1s-512MB\"><a href=\"#A-1s-512MB\" class=\"headerlink\" title=\"A(1s,512MB)\"></a>A(1s,512MB)</h1><h2 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h2><p><strong>题目背景</strong></p>\n<p>因为出题人不是标题党所以就用A当题目名字了$……$</p>\n<span id=\"more\"></span>\n<p><strong>题目描述</strong></p>\n<p>小$m$来到了一个神奇的城市,他得到了一本书.这本书十分的神奇,它有无限的页数,每一页最多能写下$m$个单词(无论一个单词有多长).而小$m$有写日记的好习惯,他想在这本书上连续写$n$天的日记,每次写日记他都要写一些单词。现在小$m$想知道,他每天写日记需要翻多少页。(假设小$m$每次写日记都紧跟着上一次写日记的末端,即每天的日记之间没有空单词)</p>\n<p><strong>输入格式</strong></p>\n<p>第一行有两个整数$n$和$m$表示小$m$要连续写日记的天数以及这本书每一页能写下多少单词.</p>\n<p>第二行有$n$个非负整数,表示第$i$天小$m$的日记要写$a_i$个单词。</p>\n<p><strong>输出格式</strong></p>\n<p>输出个非负整数,表示每天需要翻页的页数。</p>\n<p><strong>样例输入</strong></p>\n<p><strong>#1</strong></p>\n<pre><code>4 4\n1 1 1 1 \n</code></pre><p><strong>#2</strong></p>\n<pre><code>4 5\n2 2 1 5\n</code></pre><p><strong>#3</strong></p>\n<pre><code>5 7132\n192617 1145 5144 1919 8100\n</code></pre><p><strong>样例输出</strong></p>\n<p><strong>#1</strong></p>\n<pre><code>0 0 0 1\n</code></pre><p><strong>#2</strong></p>\n<pre><code>0 0 1 1\n</code></pre><p><strong>#3</strong></p>\n<pre><code>27 0 0 1 1\n</code></pre><p><strong>数据范围</strong></p>\n<p>对于$40$%的数据,保证 $n ≤ 1000$<br>对于$100$%的数据,保证 $n ≤ 10^5,m ≤ 10^9,a_i ≤ 10^9$</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>不多解释前缀和与差分的水题</p>\n<p>当$\\frac{sum[i]}{m}&gt;= 0$时,我们可以输出$\\frac{sum[i]}{m}$的值并把前面的前缀和清空；如果这个条件不成立那就输出$0$,但我们可以发现这样的时间复杂度为(N),这明显不优,继续来看这道题,我们可以发现一个明显的规律</p>\n<script type=\"math/tex; mode=display\">每天需要翻页的页数 =\\frac{sum[i]}{m} -\\frac{sum[i-1]}{m}</script><p>翻译成文字语言就是</p>\n<script type=\"math/tex; mode=display\">(\\frac{前i天的前缀和}{速度})-(\\frac{前i-1天的前缀和}{速度})</script><p>通过这个公式我们就可以求出每天需要翻页的页数</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span><span class=\"token comment\">//那么长一大串头文件不想打了直接万能头吧</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//scanf不想打了就用cin凑合吧</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>m<span class=\"token operator\">-</span>sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"B-1s-512MB\"><a href=\"#B-1s-512MB\" class=\"headerlink\" title=\"B(1s,512MB)\"></a>B(1s,512MB)</h1><p>B题是Codeforces 1413C题的改编题</p>\n<h2 id=\"题面-1\"><a href=\"#题面-1\" class=\"headerlink\" title=\"题面\"></a>题面</h2><p><strong>题目背景</strong></p>\n<p>因为出题人不是标题党所以就用B当题目名字了….</p>\n<p><strong>题目描述</strong></p>\n<p>有一天,小$m$来到了一个神奇的城市,这个城市里有$6$名商人,每一名商人都愿意用一个价格买小$m$的物品(对所有的物品都用这个价钱)。而小$m$一共有$m$件物品,因为他获得这些东西非常的不容易,所以他想把这$m$件商品都卖光。小$m$心中给每个物品都有一个默认的价值$v$,当他将一件价值$v$的商品卖给了一个出价为$p$的商人时,小会获得$v - p$的情绪波动值。而由于小$m$的心脏不太好,所以他希望他卖出商品得到的情绪波动值的最大值与情绪波动值的最小值的差最小,请你求出这个最小值。</p>\n<p><strong>输入格式</strong></p>\n<p>第一行一个正整数$m$,表示小$m$所拥有的物品的个数。</p>\n<p>第二行有个$6$非负整数,表示每个商人愿意出的价钱。</p>\n<p>第三行有$m$个非负整数,表示小$m$对他所拥有的商品价值的估计$v$。</p>\n<p><strong>输出格式</strong></p>\n<p>输出一个整数,表示小$m$的情绪波动值的最小值.</p>\n<p><strong>样例输入</strong></p>\n<pre><code>7\n1 1 1 1 2 3\n4 13 11 12 11 13 12\n</code></pre><p><strong>样例输出</strong></p>\n<pre><code>7\n</code></pre><p><strong>样例解释</strong></p>\n<p>小$m$将他认为价值为$4$的物品卖给商人$1$得到$3$的情绪波动值,再将其他物品都卖给最后一个商人,得到的最大的情绪波动值为$10$,这样他的情绪波动值之差为$7$,可以发现这是最小的情绪波动值之差.</p>\n<p><strong>数据范围</strong></p>\n<p>对于$20$%的数据,满足$n ≤ 100$</p>\n<p>对于$40$%的数据,满足$n ≤ 1000$</p>\n<p>对于$60$%的数据,满足$n ≤ 5000$</p>\n<p>对于$100$%的数据,满足$n ≤ 10^5,v_i ≤ 10^9$</p>\n<p>数据保证所有的商品估价均大于商人的出价。</p>\n<h2 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，这道题难点在于它的最大值与最小值都是会变动的。</p>\n<p>因此我们根据他的最大值最小值都是浮动这个特性，我们可以把它的最大/小值固定</p>\n<p>以固定最小值为例,我们枚举小m心里每一个物品的默认价格v,并枚举它要卖给的商人,将它此时的情绪波动值强制其作为最小值(设为minv)。</p>\n<p>同时,我们令其他的v不作为最小值,即其他的价格v不能小于最小值</p>\n<p>接下来我们只需要计算每个v的最小价格,在这些价格中取max即可。</p>\n<p>直接的想法是枚举其他的所有v，寻找满足$b_i - a_j \\geq minv最大的a_j$(此时$b_i - a_j$最小)。很明显，这样做是$O(n)$的。然而，我们要枚举$6n$个最小值,时间复杂度为$O(n^2)$稍微思考一下,我们发现并不是所有的v都需要枚举一遍。我们把a、b数组分别从小到大排序,并把a数组去重,那么不卖的v肯定是可以卖给a_{j-1}的v,但正好不能卖给a_j的商人中出价最大的一个。当然，如果存在v连a_1都不了，直接判定当前的最小值不合法，并枚举下一个最小值</p>\n<p>举个例子:a数组为$[1,3,5]$(去重之后),b数组为$[4,5,6,6,7]$,minv为3。那么，5,7是不可能取到的,因为5是可以卖给$a_1$,但不能卖给$a_2$中最大的v,7是可以卖给$a_2$但不能卖给$a_3$中最大的v。显然最大的位置在不可能取到的v中产生</p>\n<p>由于我们对 b 数组排过序，因此对每一个价格v，直接二分查找最大的 $b_i$ ，使 $b_i − a_j &lt; minv$ 即可。</p>\n<p>于是，我们只要找到这些音符即可。这些音符最多不超过6个。时间复杂度 $O(nlogn)$ 。</p>\n<p>最后说一下a为什么要去重,因为我们要找商人 $a_j−1$ 的v但用不了 $a_j$ 的商人的出价，如果存在重复，即 $a_j − 1 = a_j$ ，则可能这个出价为p $a_j−1$ 的商人、 $a_j$ 的都用不了，明显不符。</p>\n<h2 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bist/stdc++.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">U</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LL</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">FOR</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ROF</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">int</span> <span class=\"token expression\">LL</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\nLL a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    LL ans <span class=\"token operator\">=</span> <span class=\"token number\">1e18</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1e18</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">bool</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>b<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                r <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            ans <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"C-1s-512MB\"><a href=\"#C-1s-512MB\" class=\"headerlink\" title=\"C(1s,512MB)\"></a>C(1s,512MB)</h1><p>C题是Atcoder AGC002 E题改编题</p>\n<h2 id=\"题面-2\"><a href=\"#题面-2\" class=\"headerlink\" title=\"题面\"></a>题面</h2><p><strong>题目背景</strong></p>\n<p>因为出题人不是标题党所以就用C当题目名字了….</p>\n<p><strong>题目描述</strong></p>\n<p>小$m$来到了一个神奇的城市,他找到了一个知心好友小$s$,他们两个来到了一个糖果屋来$van$游戏。现在他们两个人面前有$n$堆糖果,他们两个人每次都可以选择当前糖果数最大的一堆糖果然后整堆吃掉或者把每堆糖果都吃一个。但是由于要发扬谦让的美德,所以谁先将所有糖果吃完的话,这个人将会被认为是不道德的。而小$m$和小$s$都不想当这个不道德的人,所以他们都想让对方当不道德的人。</p>\n<p>由于小$m$的年龄比较小,所以小$m$先开始吃,如果小$m$一定不是那个不道德的人,输出<code>MoveToEx\nForeverGod!</code>,如果小一定不是那个不道德的人,输出<code>ShenSenSi ForeverGod</code>!</p>\n<p><strong>输入格式</strong></p>\n<p>第一行有一个整数$n$表示糖果的堆数<br>接下来一行有$n$个正整数$a_i$表示每一堆糖果有多少个。</p>\n<p><strong>样例输出</strong></p>\n<p>输出<code>MoveToEx ForeverGod!</code>或者<code>ShenSenSi ForeverGod!</code>分别代表小$m$一定获胜或者小$s$一定获胜</p>\n<p><strong>样例输入</strong></p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">5\n7 5 1 6 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>样例输出</strong></p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">ShenSenSi 1 ForeverGod!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>数据范围</strong></p>\n<p>对于$10$%的数据,保证$n ≤ 8$</p>\n<p>对于$30$%的数据,保证$n ≤ 100$</p>\n<p>对于另外$20$%的数据,保证所有$a_i = 1$</p>\n<p>对于$100$%的数据,保证$n ≤ 10^5,a_i ≤ 10^9$</p>\n<h2 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这题是一道比较经典的博弈题(<del>虽然我在考场上没想出来正解</del>)</p>\n<p>首先我们把$a_i$从大到小排序,然后画出一个高度的柱状图,就可以转化成下面这个问题：</p>\n<p>一开始你在(1,1)，每一次你可以从(x,y)走到(x+1,y)或者(x,y+1)。你不能走到(n+1,y)对于任意$y \\in Z$;也不能对于任意$x \\in [1,n]$走到高于$(x,a_x)$的地方。无法继续走的人判为不道德的人。</p>\n<p>比如下面这个例子:</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%BC%88%E8%AE%BA1.png\" alt=\"\"></p>\n<p>然后就可以非常方便的在$O(n^2)$的时间复杂度内计算出胜负关系了。</p>\n<p>但是没有办法通过,考虑优化:我们只关心(1,1)的胜负关系。不难发现,满足$y = x+b,b\\in Z$,的点状态是一样的。所以我们可以通过计算对角线上任意一个点的状态来得到我们想要的状态。</p>\n<p>再举一个例子:</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%BC%88%E8%AE%BA2.png\" alt=\"\"></p>\n<p>对于最靠近边界的点,我们发现只需要计算向上/向右到边界的距离的奇偶性，就可以知道这个点的胜负状态：如果存在一个点的距离是奇数,那么一定获胜,否则必败。</p>\n<h2 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MOD</span> <span class=\"token expression\"><span class=\"token number\">1000000007</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ADD</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> i64<span class=\"token punctuation\">;</span> <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ivec<span class=\"token punctuation\">;</span> <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> svec<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">101010</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">int</span> grundy <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> up <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>right<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> right <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> grundy <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> grundy <span class=\"token operator\">=</span> up <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span>grundy <span class=\"token operator\">?</span> <span class=\"token string\">\"MoveToEx ForeverGod!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"ShenSenSi ForeverGod!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"D-3s-1024MB\"><a href=\"#D-3s-1024MB\" class=\"headerlink\" title=\"D(3s,1024MB)\"></a>D(3s,1024MB)</h1><h2 id=\"如果我以后线段树合并会了的话我会回来补题的-笑\"><a href=\"#如果我以后线段树合并会了的话我会回来补题的-笑\" class=\"headerlink\" title=\"如果我以后线段树合并会了的话我会回来补题的 (笑\"></a>如果我以后线段树合并会了的话我会回来补题的 (笑</h2><h2 id=\"题面-3\"><a href=\"#题面-3\" class=\"headerlink\" title=\"题面\"></a>题面</h2><p><strong>题目背景</strong></p>\n<p>因为出题人不是标题党所以就用D当题目名字了….</p>\n<p><strong>题目描述</strong></p>\n<p>小$m$来到了一个神奇的城市,他来到了这个城市的地铁站并看到了这个城市的地图</p>\n<p>这个城市一共有$n$个公园,这些公园之间由$n-1$条边相互连接,并且保证任意一对公园之间都是可以相互到达的.当几个公园的标号相邻时,这几个公园可以建立一个旅游度假区.现在小$m$想知道,在给定这些公园组成的树的树根的情况下,对于每个点为根的子树能建立几个旅游度假区。(如果几个公园之间能建立旅游度假区,那么它们一定会建立一个旅游度假区)</p>\n<p><strong>输入格式</strong></p>\n<p>第一行有一个正整数$T$表示数据组数</p>\n<p>对于每组数据,第一行有两个整数$n root$表示公园的个数以及树根的标号</p>\n<p>接下来$n-1$行,每行两个整数,表示边</p>\n<p><strong>输出格式</strong></p>\n<p>输出$T$行,每行$n$个整数,表示对于每个点为根的子树,能建立的公园数</p>\n<p><strong>样例输入</strong></p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">2\n7 4\n1 2\n2 4\n2 6\n1 3\n3 5\n3 7\n5 3\n3 1\n1 2\n2 4\n4 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>样例输出</strong></p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">4 2 3 1 1 1 1\n2 2 1 1 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>数据范围</strong></p>\n<p>对于$10$%的数据,满足$n \\le 12$</p>\n<p>对于$20$%的数据,满足$n \\le 100$</p>\n<p>对于$40$%的数据,满足$n \\le 1000$</p>\n<p>对于$70$%的数据,满足$n \\le 5000$</p>\n<p>对于$100$%的数据,满足$n \\le 10^5,T \\le 10$</p>\n","text":"A(1s,512MB)题面题目背景 因为出题人不是标题党所以就用A当题目名字了$……$ 题目描述 小$m$来到了一个神奇的城市,他得到了一本书.这本书十分的神奇,它有无限的页数,每一页最多能写下$m$个单词(无论一个单词有多长).而小$m$有写日记的好习惯,他想在这本书上连续写$...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"题解","slug":"题解","count":1,"path":"api/tags/题解.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#A-1s-512MB\"><span class=\"toc-text\">A(1s,512MB)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E9%9D%A2\"><span class=\"toc-text\">题面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#B-1s-512MB\"><span class=\"toc-text\">B(1s,512MB)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E9%9D%A2-1\"><span class=\"toc-text\">题面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-1s-512MB\"><span class=\"toc-text\">C(1s,512MB)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E9%9D%A2-2\"><span class=\"toc-text\">题面</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#D-3s-1024MB\"><span class=\"toc-text\">D(3s,1024MB)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%A5%E5%90%8E%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E4%BC%9A%E4%BA%86%E7%9A%84%E8%AF%9D%E6%88%91%E4%BC%9A%E5%9B%9E%E6%9D%A5%E8%A1%A5%E9%A2%98%E7%9A%84-%E7%AC%91\"><span class=\"toc-text\">如果我以后线段树合并会了的话我会回来补题的 (笑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E9%9D%A2-3\"><span class=\"toc-text\">题面</span></a></li></ol></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2021-09-16T12:33:01.000Z","updated":"2021-09-16T12:33:28.060Z","comments":true,"path":"api/articles/二分.json","keywords":null,"cover":null,"text":"二分的思想 给定一个单调的函数/数组 给定一个值，求这个值是否存在 或者找到这个值应当存在的位置 如果想要使用二分的话,那么给定的数组/函数,必须是经过排序的,也就是sort。 由于数组是有序的，我们可以认为它是单调递增的 假设$A_i &gt; x$,则必然有$\\forall ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"二分查找","slug":"二分查找","count":1,"path":"api/tags/二分查找.json"},{"name":"二分答案","slug":"二分答案","count":1,"path":"api/tags/二分答案.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T12:28:37.471Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}