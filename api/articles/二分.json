{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2021-09-16T12:33:01.000Z","updated":"2021-09-16T12:33:28.060Z","comments":true,"path":"api/articles/二分.json","keywords":null,"cover":null,"content":"<h2 id=\"二分的思想\"><a href=\"#二分的思想\" class=\"headerlink\" title=\"二分的思想\"></a>二分的思想</h2><ul>\n<li>给定一个单调的函数/数组</li>\n<li>给定一个值，求这个值是否存在</li>\n<li>或者找到这个值应当存在的位置</li>\n</ul>\n<p>如果想要使用二分的话,那么给定的数组/函数,必须是经过排序的,也就是sort。</p>\n<ul>\n<li>由于数组是有序的，我们可以认为它是单调递增的</li>\n<li>假设$A_i &gt; x$,则必然有$\\forall j &gt; i,A_j &lt; x$</li>\n<li>假设$A_j &lt; x$,则必然有$\\forall j &lt; i$,$A_j &lt; x$</li>\n<li>二分的原理就是每次在待定区间内选择mid</li>\n<li>必然可以确定一边是没有意义的。每次问题的规模就缩小$\\frac{1}{2}$</li>\n<li>因此时间复杂度为$O(\\log{n})$</li>\n</ul>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>我们来看下面这么一道例题</p>\n<p><strong>给定有n个元素的有序数组a，有m组询问,每次询问都会给一个数字b，询问有多少个数 $a_i \\le b$的</strong></p>\n<p>分析:</p>\n<p>很简单可以想到遍历一遍a数组记录有多少个数$\\leq b$,但是这样做的时间复杂度显然是$O(n)$的，稍微有一点慢</p>\n<p>过一会我们不难发现整个数组是排好序的数组,那么我们可以充分利用这一点性质,那我们来看看怎么做呢:</p>\n<p>比如$a_1,a_2,a_3,……,a_n$我们要看有多少个数$\\le$b,我们可以把数组中所有$\\le$的数字记作$1$ 如果$&gt;b$的话记作$0$</p>\n<p>我们可以发现当我们给定b的值的时候我们可以把原数组转换成$1、1、1、1、……、0、0、0$,所有的$1$ 都在前面,所有的$0$都在后面,那么我们看有多少个$1$就可以知道有多少个数$\\le$ b了,所以我们只需要找到$0、1$的分界点即可,这种方法就叫做二分查找</p>\n<p>我们这里二分有两种方法一种是找最右的$1$，另外一种是找最靠左的$0$。</p>\n<p><strong>方法一(找最靠右的1)</strong>:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span>v <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//代表最右边的1可能出现在z[light] ~ z[right - 1]这段区间</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> v<span class=\"token punctuation\">)</span> left <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>方法二(找最靠左的0)</strong>:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span>v <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>right <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//代表最左边的0可能出现在z[light + 1] ~ z[right]这段区间</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> v<span class=\"token punctuation\">)</span> left <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"二分答案\"><a href=\"#二分答案\" class=\"headerlink\" title=\"二分答案\"></a>二分答案</h2><p>顾名思义就是对答案进行二分</p>\n<ul>\n<li>对于某些要求“满足某条件的最小值”类的问题，对答案进行二分，假设答案不超过mid,则问题变为“满足某条件且某值不超过mid”的判定性问题。</li>\n<li>常用在最大值最小化之类的问题</li>\n<li>在二分答案之后往往需要一个贪心策略</li>\n</ul>\n<p>例1:</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P2678\">洛谷P2678 NOIP 2015提高组</a></p>\n<p><strong>分析</strong></p>\n<ul>\n<li>最小化: 最大跳跃的距离</li>\n<li>二分答案： 设置答案为mid，则问题变为：<br>  n个石子,只能跳m次，每次最远距离不超过mid，问是否可行。<br>  或者m个石子,每次最远距离不超过mid，问最少跳多少次(然后和m比较即可)</li>\n<li>贪心策略:每次跳的尽量远即可</li>\n</ul>\n<p><strong>代码实现</strong></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token keyword\">int</span> d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">suv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">not</span><span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tot <span class=\"token operator\">></span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   d <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>m <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n   l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n       mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">suv</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n           l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>例题2<a href=\"https://www.luogu.com.cn/problem/P1824\">进击的奶牛</a></p>\n<p>分析:</p>\n<ul>\n<li>题目要求让我们求出两头牛最大的最近距离，也就是让最大值最小这一问题，所以我们很容易想到二分答案</li>\n<li>我们可以定义一个变量来储存当前最优解。定义闭区间$[l,r]$，代表程序在这个区间内寻找答案</li>\n<li>令$mid = \\frac{l + r}{2}$<ul>\n<li>若mid为解,则$ans = max(ans,mid),l = mid + 1$</li>\n<li>若$mid$不为解,则$r = mid + 1$.$mid$不是解,因此我们在左边寻找更优解</li>\n</ul>\n</li>\n<li>重复上述过程,知道l &gt; r的时候退出循环,ans即最优解(ps:当l = r时,也必须要在区间内进行判断,因为当前还不能确定该区间内是否存在更优解)</li>\n</ul>\n<p>代码:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> tot <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">FOR</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> z<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> k<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">&#123;</span>\n            tot<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            num <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tot <span class=\"token operator\">>=</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    right <span class=\"token operator\">=</span> z<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> z<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>left<span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","text":"二分的思想 给定一个单调的函数/数组 给定一个值，求这个值是否存在 或者找到这个值应当存在的位置 如果想要使用二分的话,那么给定的数组/函数,必须是经过排序的,也就是sort。 由于数组是有序的，我们可以认为它是单调递增的 假设$A_i &gt; x$,则必然有$\\forall ...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"二分查找","slug":"二分查找","count":1,"path":"api/tags/二分查找.json"},{"name":"二分答案","slug":"二分答案","count":1,"path":"api/tags/二分答案.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E7%9A%84%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">二分的思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">二分查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88\"><span class=\"toc-text\">二分答案</span></a></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"前缀和与差分","uid":"f65c2271ed43cdf14e2eea3c0c440d44","slug":"前缀和与差分","date":"2021-09-16T12:34:33.000Z","updated":"2021-09-16T12:38:37.371Z","comments":true,"path":"api/articles/前缀和与差分.json","keywords":null,"cover":null,"text":"前缀和问题引入给定n个数a1,a2,a3,……an,有m次询问操作,给定l和r,求al ~ ar的和为多少要想求这个问题,我们需要知道a的前缀和为多少 $我们令b_1 = a_1,b_2 = a_1 + a_2,b_3 = a_1 + a_2 + a_3,……b_k = a_1 ...","link":"","photos":[],"count_time":{"symbolsCount":902,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"},{"name":"差分","slug":"差分","count":1,"path":"api/tags/差分.json"},{"name":"小技巧","slug":"小技巧","count":1,"path":"api/tags/小技巧.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2020.11.4联考题解","uid":"eecca6179b73e75222042654664d0e18","slug":"2020-11-4联考题解","date":"2021-09-16T12:31:33.000Z","updated":"2021-09-16T12:32:11.365Z","comments":true,"path":"api/articles/2020-11-4联考题解.json","keywords":null,"cover":[],"text":"A(1s,512MB)题面题目背景 因为出题人不是标题党所以就用A当题目名字了$……$ 题目描述 小$m$来到了一个神奇的城市,他得到了一本书.这本书十分的神奇,它有无限的页数,每一页最多能写下$m$个单词(无论一个单词有多长).而小$m$有写日记的好习惯,他想在这本书上连续写$...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"题解","slug":"题解","count":1,"path":"api/tags/题解.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}