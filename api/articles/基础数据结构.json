{"title":"基础数据结构","uid":"7ff326fdf142ec1868a8e7b87c57157c","slug":"基础数据结构","date":"2021-09-16T12:40:16.000Z","updated":"2021-09-16T13:26:04.168Z","comments":true,"path":"api/articles/基础数据结构.json","keywords":null,"cover":null,"content":"<h1 id=\"基础数据结构\"><a href=\"#基础数据结构\" class=\"headerlink\" title=\"基础数据结构\"></a>基础数据结构</h1><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表:\"></a>链表:</h2><p>因为数组的插入和删除很慢，所以我们引入了链表这个概念,那么链表是什么样的一个数据结构呢?</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义:\"></a>定义:</h3><p>每一个元素都有箭头指向下一个元素,同理每一个元素都有箭头指向上一个元素,即 依靠箭头把n个数连接起来的一个数据结构</p>\n<hr>\n<h3 id=\"代码实现-包括插入和删除\"><a href=\"#代码实现-包括插入和删除\" class=\"headerlink\" title=\"代码实现(包括插入和删除)\"></a>代码实现(包括插入和删除)</h3><details>\n<summary>cpp</summary>\n<pre><code>\n//核心代码\nstruct node&#123;\n    int next,pre;\n    int v;\n&#125;z[maxn];\n\n//i -> k\n//i -> j -> k\nvoid insert(int i,int j)//把编号为j的节点插入到编号为i的节点后面\n&#123;//O(1)\n    int k = z[i].next;\n    z[i].next = j;\n    z[j].pre = i;\n    z[k].pre = j;\n    z[j].next = k;\n&#125;\n\n//j -> i -> k\n//j -> k\nvoid del(int i)\n&#123;//O(1)\n    int j = z[i].pre;\n    int k = z[i].next;\n    z[j].next = k;\n    z[k].pre = j;\n&#125;\n</code></pre>\n</details>\n\n<hr>\n<hr>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>所谓的队列实际上的模型来源于排队,可以理解为前面有一个柜台,有若干的人在排队</p>\n<h3 id=\"模型的操作\"><a href=\"#模型的操作\" class=\"headerlink\" title=\"模型的操作\"></a>模型的操作</h3><p><strong>1.来一个新的人</strong></p>\n<p>如果来一个新的人那么他会在队列的右边<br>即一个元素从右边进入</p>\n<p><strong>2.走掉一个人</strong></p>\n<p>如果走掉一个人,那么走掉的这个人在左边<br>即一个元素从左边扔掉</p>\n<p>基于上述两个操作我们可以得出:先进入队列的元素会先被删除 即队列的<strong>先进先出</strong>性质</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"手写队列\"><a href=\"#手写队列\" class=\"headerlink\" title=\"手写队列\"></a>手写队列</h4><hr>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token comment\">//加入一个元素</span>\n    <span class=\"token punctuation\">&#123;</span>\n        tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//删除一个元素</span>\n        head<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//访问最前面的元素</span>\n        <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h4 id=\"STL实现\"><a href=\"#STL实现\" class=\"headerlink\" title=\"STL实现\"></a>STL实现</h4><p>STL实现需要用到头文件</p>\n<p><strong>#include “queue”</strong></p>\n<hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n\nqueue <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//加入一个元素</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除最前面的元素</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//访问最前面的元素</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//询问队列大小</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><hr>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈这个数据结构我们可以把它想象成一个桶,我们能做的事情是向桶里加一个元素,和在桶里取出一个元素</p>\n<p>我们如果向栈里顺次放入1,2,3的话,那么我们最开始取出的元素为3;我们把这个性质叫做栈的<strong>先进后出</strong>性质</p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"手写栈\"><a href=\"#手写栈\" class=\"headerlink\" title=\"手写栈\"></a>手写栈</h4><hr>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">stack</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> z<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//询问栈顶元素是多少</span>\n        <span class=\"token keyword\">return</span> z<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h4 id=\"STL实现-1\"><a href=\"#STL实现-1\" class=\"headerlink\" title=\"STL实现\"></a>STL实现</h4><p>STL实现栈需要用到<br><strong>#include “stack”</strong></p>\n<hr>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span>\n\nstack <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//询问栈顶元素</span>\n    s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//栈里面有多少个元素</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id=\"堆-——-优先队列\"><a href=\"#堆-——-优先队列\" class=\"headerlink\" title=\"堆 —— 优先队列\"></a>堆 —— 优先队列</h2><h3 id=\"支持的操作\"><a href=\"#支持的操作\" class=\"headerlink\" title=\"支持的操作\"></a>支持的操作</h3><p>1.加一个数</p>\n<p>2.删除一个数(删掉最大的数)</p>\n<p>3.询问最大的数是多少</p>\n<p><strong>进行上述操作的是大根堆</strong></p>\n<p>与上述操作相对应的即删除和询问的数都是最小的元素,这样的数据结构称为小根堆。</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>要想实现这个思路我们要先学习另外一个数据结构 ——— 二叉树</p>\n<h4 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h4><p>二叉树就是每个节点都有一个左儿子和一个右儿子的数据结构</p>\n<p>现在有一个p节点,那么Ap节点的左儿子为A2p,右儿子为A2p+1,而且必须满足性质Ap ≥ A2p且Ap ≥ A2p+1</p>\n<p>所以我们能维护好Ap ≥ A2p且Ap ≥ A2p+1这个性质,最大值就可以很简单的取出来了</p>\n<p>在这条性质下,最大值是A1这个节点的值,即根节点的值</p>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"手写\"><a href=\"#手写\" class=\"headerlink\" title=\"手写\"></a>手写</h4><hr>\n<details>\n<summary>cpp</summary>\n<pre><code>\n//核心代码\nstruct heap&#123;\n    int n,z[maxn];\n\n    int top()\n        return z[1];\n\n    void push(int x)&#123;\n        n++; z[n] = x;\n        int p = n;\n        while(p != 1)&#123;\n            int f = p/2;\n            if(z[f] < f[p])&#123;\n                swap(z[f],z[p]);\n                p = f;\n            &#125;\n            else break;\n        &#125;\n    &#125;\n\n    void pop()&#123;\n        z[1] = z[n]; n--;\n        int p = 1;\n        while(p * 2 <= n)&#123;\n            int pp = p*2;\n            if(p*2+1 <= n && z[p*2+1] > z[p*2]) pp == p*2+1;\n            if(z[p] < z[pp])&#123;\n                swap(z[p],z[pp]);\n                p = pp;\n            &#125;\n            else break;\n        &#125;\n    &#125;\n&#125; \n</code></pre>\n</details>\n\n<h4 id=\"STL实现-2\"><a href=\"#STL实现-2\" class=\"headerlink\" title=\"STL实现\"></a>STL实现</h4><p>堆需要用到头文件<br><strong>include “queue”</strong></p>\n<h5 id=\"大根堆\"><a href=\"#大根堆\" class=\"headerlink\" title=\"大根堆\"></a>大根堆</h5><hr>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n\npriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> heap<span class=\"token punctuation\">;</span><span class=\"token comment\">//大根堆</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h5 id=\"小根堆\"><a href=\"#小根堆\" class=\"headerlink\" title=\"小根堆\"></a>小根堆</h5><h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n\npriority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> heap<span class=\"token punctuation\">;</span><span class=\"token comment\">//小根堆</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    heap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id=\"—\"><a href=\"#—\" class=\"headerlink\" title=\"—-\"></a>—-</h2><p>End</p>\n<p>其实还有一些例如循环队列 双端队列 单调队列这种在队列的基础上进行深化的数据结构本文就不提了,这些数据结构我会在进阶数据结构里面提到这些数据结构</p>\n","text":"基础数据结构链表:因为数组的插入和删除很慢，所以我们引入了链表这个概念,那么链表是什么样的一个数据结构呢? 定义:每一个元素都有箭头指向下一个元素,同理每一个元素都有箭头指向上一个元素,即 依靠箭头把n个数连接起来的一个数据结构 代码实现(包括插入和删除) cpp //核心代码 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"},{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":1,"path":"api/tags/队列.json"},{"name":"STL","slug":"STL","count":1,"path":"api/tags/STL.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"},{"name":"二叉树","slug":"二叉树","count":1,"path":"api/tags/二叉树.json"},{"name":"堆","slug":"堆","count":1,"path":"api/tags/堆.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">基础数据结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">链表:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-%E5%8C%85%E6%8B%AC%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">代码实现(包括插入和删除)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%9F%E5%88%97\"><span class=\"toc-text\">队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">模型的操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E9%98%9F%E5%88%97\"><span class=\"toc-text\">手写队列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#STL%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">STL实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\n\nqueue &lt;int&gt; q;\n\nint main()\n{\n    q.push(233);&#x2F;&#x2F;加入一个元素\n    q.push(2333);\n    q.pop();&#x2F;&#x2F;删除最前面的元素\n    q.front();&#x2F;&#x2F;访问最前面的元素\n    q.size();&#x2F;&#x2F;询问队列大小\n}</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E6%A0%88\"><span class=\"toc-text\">手写栈</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\nstruct stack\n{\n    int size &#x3D; 0;\n    int z[maxn];\n\n    void push(int x){\n        size++;\n        z[size] &#x3D; x;\n    }\n\n    void pop()\n        size--;\n\n    int top()&#x2F;&#x2F;询问栈顶元素是多少\n        return z[size];\n}</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#STL%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">STL实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-2\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\n#include &lt;stack&gt;\n\nstack &lt;int&gt; s;\n\nint main()\n{\n    s.push(233);\n    s.push(2333);\n    s.pop();\n    s.top();&#x2F;&#x2F;询问栈顶元素\n    s.size();&#x2F;&#x2F;栈里面有多少个元素\n}</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86-%E2%80%94%E2%80%94-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97\"><span class=\"toc-text\">堆 —— 优先队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">支持的操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">二叉树</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99\"><span class=\"toc-text\">手写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#STL%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">STL实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E6%A0%B9%E5%A0%86\"><span class=\"toc-text\">大根堆</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-3\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\n#include &lt;queue&gt;\n\npriority_queue&lt;int&gt; heap;&#x2F;&#x2F;大根堆\n\nint main()\n{\n    heap.push(233);\n    heap.push(2333);\n    heap.pop();\n    heap.top();\n    heap.size();\n}</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%A0%B9%E5%A0%86\"><span class=\"toc-text\">小根堆</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-4\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\n#include &lt;queue&gt;\n\npriority_queue&lt;int&gt; heap;&#x2F;&#x2F;小根堆\n\nint main()\n{\n    heap.push(-233);\n    heap.push(-2333);\n    heap.pop();\n    heap.top();\n    heap.size();\n}</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E2%80%94\"><span class=\"toc-text\">—-</span></a></li></ol></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}},"mapped":true,"prev_post":{"title":"扩展欧几里得","uid":"efce904e2fde083966eb57ba4b88b825","slug":"扩展欧几里得","date":"2021-09-16T12:43:04.000Z","updated":"2021-09-16T13:26:12.698Z","comments":true,"path":"api/articles/扩展欧几里得.json","keywords":null,"cover":null,"text":"扩展欧几里得算法概况我们之前讲的gcd算法叫做欧几里得算法，下面介绍拓展欧几里得算法(Extended Euclidean algorithm,EXGCD),从它的名字就可以看出来，它是欧几里得算法的拓展。扩欧算法求的是二元一次不定方程$ax + by = gcd(a,b)$的一...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"拓展欧几里得","slug":"拓展欧几里得","count":1,"path":"api/tags/拓展欧几里得.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}}},"next_post":{"title":"图论基础","uid":"2205e815a910486f8a5ae632a2606305","slug":"图论基础","date":"2021-09-16T12:38:58.000Z","updated":"2021-09-16T13:26:31.926Z","comments":true,"path":"api/articles/图论基础.json","keywords":null,"cover":[],"text":"图论基础图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set). 有向图: 可以从1→2，但不可以从2→1 无向图: 可以从1→2，也可以从2→1 有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"https://github.com/TheLight-CCF","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/thelight-59","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/78969213"}}}}}}