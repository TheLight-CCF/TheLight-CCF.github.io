{"title":"素数筛","uid":"bf5652b06f25669829372da351ef6ae7","slug":"素数筛","date":"2021-09-16T12:49:29.000Z","updated":"2021-09-16T12:49:47.578Z","comments":true,"path":"api/articles/素数筛.json","keywords":null,"cover":null,"content":"<h1 id=\"素数筛\"><a href=\"#素数筛\" class=\"headerlink\" title=\"素数筛\"></a>素数筛</h1><h2 id=\"素数\"><a href=\"#素数\" class=\"headerlink\" title=\"素数\"></a>素数</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念:\"></a>概念:</h3><p>学素数筛之前,我们要先引入素数的概念,那么,何为素数:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>除了1和自身之外,没有其他约数的数称为素数(也叫质数)</p>\n<p>有其他约数的数称为合数</p>\n<p>特别的1既不是质数,也不是合数</p></blockquote>\n<h3 id=\"判定\"><a href=\"#判定\" class=\"headerlink\" title=\"判定:\"></a>判定:</h3><p>那么我们来思考,如何判断一个数是否是质数</p>\n<p>自然我们可以枚举从小到大每个数看看能否被整除,复杂度$O(n)$</p>\n<p>但我们很容易就会发现一个事实,如果x是a的约数,那么 $\\frac{a}{x}$也是a的约数,因此,我们只需要枚举到$\\sqrt{a}$即可。时间复杂度$O(\\sqrt{a})$</p>\n<h4 id=\"代码实现-暴力\"><a href=\"#代码实现-暴力\" class=\"headerlink\" title=\"代码实现(暴力)\"></a>代码实现(暴力)</h4><hr>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h4 id=\"代码实现-优化\"><a href=\"#代码实现-优化\" class=\"headerlink\" title=\"代码实现(优化)\"></a>代码实现(优化)</h4><hr>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h3 id=\"素数筛法\"><a href=\"#素数筛法\" class=\"headerlink\" title=\"素数筛法:\"></a>素数筛法:</h3><p>如果我们想要知道 $\\leq n$的所有素数呢</p>\n<h4 id=\"埃式筛法\"><a href=\"#埃式筛法\" class=\"headerlink\" title=\"埃式筛法\"></a>埃式筛法</h4><p>一个自然的想法是我们对,每个小于等于n的每个数,进行一次判定。复杂度$O(n\\sqrt{n})$</p>\n<p>这样时间复杂度显然太高了,所以我们要优化一下</p>\n<p>考虑到一个数的大于自身的倍数一定是合数，利用这个结论，我们可以避免不必要的判断</p>\n<p>如果我们从小到大考虑每个数，然后同时把当前这个数的所有(比自己大的)倍数记为合数,那么运行结束的时候,没有被标记过的就全是素数了。</p>\n<p>这就是$Eratosthenes$筛法,时间复杂度是$O(n\\log\\log{n})$</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><hr>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            pri<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<hr>\n<h4 id=\"欧拉筛法\"><a href=\"#欧拉筛法\" class=\"headerlink\" title=\"欧拉筛法\"></a>欧拉筛法</h4><p>我们发现，埃式筛法似乎会某些数标记了很多次其为合数。再考虑优化掉这些步骤。如果能让每个数都只被标记一次,那么时间复杂度就可以降到$O(n)$了</p>\n<p>这种筛法叫做欧拉(Euler)筛法。</p>\n<hr>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">Euler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> maxn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> pri<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> cnt<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1ll</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">*</span> pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            vis<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 之前被 pri[j] 筛过了</span>\n<span class=\"token comment\">//由于 pri 里面的质数是从小到大的 所以 i 乘上其他的质数的结果一定也是</span>\n<span class=\"token comment\">//pri[j]的倍数 它们都被筛过了 就不要再筛过了,就不需要筛了,所以这里直接break掉就好了</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1>","feature":true,"text":"素数筛素数概念:学素数筛之前,我们要先引入素数的概念,那么,何为素数: 除了1和自身之外,没有其他约数的数称为素数(也叫质数) 有其他约数的数称为合数 特别的1既不是质数,也不是合数 判定:那么我们来思考,如何判断一个数是否是质数 自然我们可以枚举从小到大每个数看看能否被整除,复...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"素数","slug":"素数","count":1,"path":"api/tags/素数.json"},{"name":"筛法","slug":"筛法","count":1,"path":"api/tags/筛法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A0%E6%95%B0%E7%AD%9B\"><span class=\"toc-text\">素数筛</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A0%E6%95%B0\"><span class=\"toc-text\">素数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E5%AE%9A\"><span class=\"toc-text\">判定:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-%E6%9A%B4%E5%8A%9B\"><span class=\"toc-text\">代码实现(暴力)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">代码实现(优化)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95\"><span class=\"toc-text\">素数筛法:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%83%E5%BC%8F%E7%AD%9B%E6%B3%95\"><span class=\"toc-text\">埃式筛法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95\"><span class=\"toc-text\">欧拉筛法</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#The-End\"><span class=\"toc-text\">The End</span></a></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"矩阵","uid":"1109bb51ef1fe7597b5b03d20a7a9ddd","slug":"矩阵","date":"2021-09-16T12:48:18.000Z","updated":"2021-09-16T12:49:11.723Z","comments":true,"path":"api/articles/矩阵.json","keywords":null,"cover":null,"text":"在学习矩阵之前我们需要学习快速幂运算 快速幂前言快速幂的作用就是求$x^y$的值 思想也非常简单以前我们的$pow$函数时间复杂度为$O(y)$的这个函数是通过每次的乘法运算实现的例如:$x^{37}$ = $x \\cdot x \\cdot x \\cdot x \\cdot x …...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"},{"name":"快速幂","slug":"快速幂","count":1,"path":"api/tags/快速幂.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}