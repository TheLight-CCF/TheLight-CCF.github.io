{"title":"图论基础","uid":"2205e815a910486f8a5ae632a2606305","slug":"图论基础","date":"2021-09-16T12:38:58.000Z","updated":"2021-09-16T12:39:29.966Z","comments":true,"path":"api/articles/图论基础.json","keywords":null,"cover":[],"content":"<h1 id=\"图论基础\"><a href=\"#图论基础\" class=\"headerlink\" title=\"图论基础\"></a>图论基础</h1><h2 id=\"图的定义-图G是一个有序二元组-V-G-其中V称为点集-Vertices-Set-E称为边集-Edges-set\"><a href=\"#图的定义-图G是一个有序二元组-V-G-其中V称为点集-Vertices-Set-E称为边集-Edges-set\" class=\"headerlink\" title=\"图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set).\"></a>图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set).</h2><span id=\"more\"></span>\n<p><strong>有向图</strong>:</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E6%9C%89%E5%90%91%E5%9B%BE.png\" alt=\"图的定义有向图\" style=\"zoom: 80%;height:250px;width:250px;\" />   </p>\n<p>可以从1→2，但不可以从2→1</p>\n<p><strong>无向图</strong>:</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89%E6%97%A0%E5%90%91%E5%9B%BE.png\" alt=\"图的定义无向图\" style=\"zoom: 80%;height:250px;width:250px;\" /></p>\n<p>可以从1→2，也可以从2→1</p>\n<h4 id=\"有向图、无向图-如果给图的每条边规定一个方向，那么得到的图称为有向图-在有向图中，与一个节点相关联的边有出边和入边之分-相反，边没有方向的图称为无向图。\"><a href=\"#有向图、无向图-如果给图的每条边规定一个方向，那么得到的图称为有向图-在有向图中，与一个节点相关联的边有出边和入边之分-相反，边没有方向的图称为无向图。\" class=\"headerlink\" title=\"有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图.在有向图中，与一个节点相关联的边有出边和入边之分.相反，边没有方向的图称为无向图。\"></a>有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图.在有向图中，与一个节点相关联的边有出边和入边之分.相反，边没有方向的图称为无向图。</h4><h2 id=\"图的概念\"><a href=\"#图的概念\" class=\"headerlink\" title=\"图的概念:\"></a>图的概念:</h2><h4 id=\"度-Degree-一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d-v-。即一个点连接了多少条边。-住：度一般是针对无向图\"><a href=\"#度-Degree-一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d-v-。即一个点连接了多少条边。-住：度一般是针对无向图\" class=\"headerlink\" title=\"度(Degree):一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d(v)。即一个点连接了多少条边。(住：度一般是针对无向图)\"></a>度(<i>Degree</i>):一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d(v)。即一个点连接了多少条边。(住：度一般是针对无向图)</h4><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BA%A6.png\" alt=\"度\" style=\"height:250px;width:250px;height:250px;width:250px;\"  /></p>\n<p>例如1这个节点的度就是d(v) = 5</p>\n<h4 id=\"入度-In-drgree-和出度-Out-degree-对于有向图来说-一个顶点的度可细分为入度和出度。一个顶点的的入度是指与其关联的各边之中，以其为终点的边数-出度则是相对的概念，指以该顶点为起点的边数。-注：入度和出度一般针对有向图\"><a href=\"#入度-In-drgree-和出度-Out-degree-对于有向图来说-一个顶点的度可细分为入度和出度。一个顶点的的入度是指与其关联的各边之中，以其为终点的边数-出度则是相对的概念，指以该顶点为起点的边数。-注：入度和出度一般针对有向图\" class=\"headerlink\" title=\"入度(In-drgree)和出度(Out-degree):对于有向图来说,一个顶点的度可细分为入度和出度。一个顶点的的入度是指与其关联的各边之中，以其为终点的边数;出度则是相对的概念，指以该顶点为起点的边数。(注：入度和出度一般针对有向图)\"></a>入度(<i>In-drgree</i>)和出度(<i>Out-degree</i>):对于有向图来说,一个顶点的度可细分为入度和出度。一个顶点的的入度是指与其关联的各边之中，以其为终点的边数;出度则是相对的概念，指以该顶点为起点的边数。(注：入度和出度一般针对有向图)</h4><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6.png\" alt=\"入度和出度\" style=\"zoom: 67%;height:250px;width:250px;\" /></p>\n<p>例如：1节点的入度为in(v) = 3，1节点的出度为out(v) = 4;</p>\n<h4 id=\"自环-Loop-若一条边的两个顶点为同一顶点，则此边称作自环。即一个点的起点和终点都是同一个点\"><a href=\"#自环-Loop-若一条边的两个顶点为同一顶点，则此边称作自环。即一个点的起点和终点都是同一个点\" class=\"headerlink\" title=\"自环(Loop):若一条边的两个顶点为同一顶点，则此边称作自环。即一个点的起点和终点都是同一个点.\"></a>自环(Loop):若一条边的两个顶点为同一顶点，则此边称作自环。即一个点的起点和终点都是同一个点.</h4><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E7%8E%AF%E6%97%A0%E5%90%91%E5%9B%BE.png\" alt=\"自环无向图\" style=\"zoom:50%;height:250px;width:250px;\" /></p>\n<p>无向图</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%87%AA%E7%8E%AF%E6%9C%89%E5%90%91%E5%9B%BE.png\" alt=\"自环有向图\" style=\"zoom:50%;height:250px;width:250px;\" /></p>\n<p>有向图</p>\n<h4 id=\"路径-Path\"><a href=\"#路径-Path\" class=\"headerlink\" title=\"路径(Path):\"></a>路径(Path):</h4><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%B7%AF%E5%BE%84.png\" alt=\"路径\" style=\"zoom: 50%;height:250px;width:250px;\" /></p>\n<p>例如:这个无向图的路径可以为1→2→3→5→1→4</p>\n<p>简单路径:路径上的不重复的路径。</p>\n<p>还是上面的图 1→2→3→5就是一个简单路径。</p>\n<h4 id=\"环-首尾相连的路径\"><a href=\"#环-首尾相连的路径\" class=\"headerlink\" title=\"环:首尾相连的路径\"></a>环:首尾相连的路径</h4><p>简单环：所有的点除了出发点和结束点相同其余所有点都只会出现一次;</p>\n<p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%8E%AF.png\" alt=\"环\" style=\"zoom:50%;height:250px;width:250px;\" /></p>\n<p>例如:环的路径可以为1→2→3→4→5→2→1；简单环的路径可以是1→2→ 3→4→1。</p>\n<h2 id=\"特殊的图\"><a href=\"#特殊的图\" class=\"headerlink\" title=\"特殊的图\"></a>特殊的图</h2><h3 id=\"没有环的无向图-树\"><a href=\"#没有环的无向图-树\" class=\"headerlink\" title=\"没有环的无向图:树\"></a>没有环的无向图:树</h3><h4 id=\"性质：1-连通-2-无环-3-无向\"><a href=\"#性质：1-连通-2-无环-3-无向\" class=\"headerlink\" title=\"性质：1.连通    2.无环    3.无向\"></a>性质：1.连通    2.无环    3.无向</h4><p>n个点的树有n-1条边</p>\n<h4 id=\"如果树的性质只满足无环和无向的话那么我们将这种图叫做森林\"><a href=\"#如果树的性质只满足无环和无向的话那么我们将这种图叫做森林\" class=\"headerlink\" title=\"如果树的性质只满足无环和无向的话那么我们将这种图叫做森林\"></a>如果树的性质只满足无环和无向的话那么我们将这种图叫做森林</h4><h4 id=\"如果树的性质只满足连通和无环那么我们可以得到有向树\"><a href=\"#如果树的性质只满足连通和无环那么我们可以得到有向树\" class=\"headerlink\" title=\"如果树的性质只满足连通和无环那么我们可以得到有向树\"></a>如果树的性质只满足连通和无环那么我们可以得到有向树</h4><h5 id=\"有向树可以分为外向树和内向树-有向树和无向树的概念都是相对于方向决定的\"><a href=\"#有向树可以分为外向树和内向树-有向树和无向树的概念都是相对于方向决定的\" class=\"headerlink\" title=\"有向树可以分为外向树和内向树(有向树和无向树的概念都是相对于方向决定的)\"></a>有向树可以分为外向树和内向树(有向树和无向树的概念都是相对于方向决定的)</h5><p>外向树：可以找到一个点使得所有的边都是从这个点向外走的</p>\n<p>内向树：可以找到一个点使得所有的边都是朝着这个点走的</p>\n<h4 id=\"如果树的性质只满足连通和无向那么我们可以得到数的拓展图——章鱼图-章鱼图一定存在一个环-；\"><a href=\"#如果树的性质只满足连通和无向那么我们可以得到数的拓展图——章鱼图-章鱼图一定存在一个环-；\" class=\"headerlink\" title=\"如果树的性质只满足连通和无向那么我们可以得到数的拓展图——章鱼图(章鱼图一定存在一个环)；\"></a>如果树的性质只满足连通和无向那么我们可以得到数的拓展图——章鱼图(章鱼图一定存在一个环)；</h4><h6 id=\"中间有一个环，从每个点延伸出去的部分都是一颗树的图这种图我们把它叫做章鱼图-周围的树没有环\"><a href=\"#中间有一个环，从每个点延伸出去的部分都是一颗树的图这种图我们把它叫做章鱼图-周围的树没有环\" class=\"headerlink\" title=\"中间有一个环，从每个点延伸出去的部分都是一颗树的图这种图我们把它叫做章鱼图(周围的树没有环)\"></a>中间有一个环，从每个点延伸出去的部分都是一颗树的图这种图我们把它叫做章鱼图(周围的树没有环)</h6><p>n个点的章鱼图有n条边</p>\n<h3 id=\"树的基本定义-根，儿子，父亲，爷爷，祖先，深度-叶子节点\"><a href=\"#树的基本定义-根，儿子，父亲，爷爷，祖先，深度-叶子节点\" class=\"headerlink\" title=\"树的基本定义:根，儿子，父亲，爷爷，祖先，深度,叶子节点\"></a>树的基本定义:根，儿子，父亲，爷爷，祖先，深度,叶子节点</h3><h5 id=\"根节点-最上面的节点。\"><a href=\"#根节点-最上面的节点。\" class=\"headerlink\" title=\"根节点:最上面的节点。\"></a>根节点:最上面的节点。</h5><h5 id=\"儿子节点-向下走的下一排点。\"><a href=\"#儿子节点-向下走的下一排点。\" class=\"headerlink\" title=\"儿子节点:向下走的下一排点。\"></a>儿子节点:向下走的下一排点。</h5><h5 id=\"父亲节点-向上走一步的点。\"><a href=\"#父亲节点-向上走一步的点。\" class=\"headerlink\" title=\"父亲节点:向上走一步的点。\"></a>父亲节点:向上走一步的点。</h5><h5 id=\"爷爷节点：从一个点向上走两步的点。\"><a href=\"#爷爷节点：从一个点向上走两步的点。\" class=\"headerlink\" title=\"爷爷节点：从一个点向上走两步的点。\"></a>爷爷节点：从一个点向上走两步的点。</h5><h5 id=\"祖先：从该点开始走到根节点的所有点。\"><a href=\"#祖先：从该点开始走到根节点的所有点。\" class=\"headerlink\" title=\"祖先：从该点开始走到根节点的所有点。\"></a>祖先：从该点开始走到根节点的所有点。</h5><h5 id=\"深度-定义根节点的深度为1，选定的点在第几层就是深度。\"><a href=\"#深度-定义根节点的深度为1，选定的点在第几层就是深度。\" class=\"headerlink\" title=\"深度:定义根节点的深度为1，选定的点在第几层就是深度。\"></a>深度:定义根节点的深度为1，选定的点在第几层就是深度。</h5><h5 id=\"叶子节点-没有儿子的节点。\"><a href=\"#叶子节点-没有儿子的节点。\" class=\"headerlink\" title=\"叶子节点:没有儿子的节点。\"></a>叶子节点:没有儿子的节点。</h5><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89.png\" alt=\"树的基本定义\" style=\"zoom:67%;height:500px;width:500px;\" /></p>\n<p>例如:这棵树的根节点为1;7的儿子节点为10、11、12;7的父亲为3;7的爷爷为1;12祖先为1,3,7,12;这棵树的深度为4，这棵树的叶子节点。</p>\n<h3 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h3><h4 id=\"性质：\"><a href=\"#性质：\" class=\"headerlink\" title=\"性质：\"></a>性质：</h4><p>1.无向图        </p>\n<p>2.可以把所有的点分为左边和右边两部分,并且所有边都是从左边一个点连到右边一个点</p>\n<h4 id=\"特殊的图中的二分图：\"><a href=\"#特殊的图中的二分图：\" class=\"headerlink\" title=\"特殊的图中的二分图：\"></a>特殊的图中的二分图：</h4><p>树一定是二分图(将所有奇数深度的点放在左边，将所有偶数深度的点放在右边)</p>\n<h4 id=\"二分图的判定方式：\"><a href=\"#二分图的判定方式：\" class=\"headerlink\" title=\"二分图的判定方式：\"></a>二分图的判定方式：</h4><p>如果有长度为奇数的简单环则不是二分图，如果长有度为偶数简单环则是二分图,如果没有环则是二分图。</p>\n<h4 id=\"二分图的判定方法-黑白染色法-dfs-深度优先搜索\"><a href=\"#二分图的判定方法-黑白染色法-dfs-深度优先搜索\" class=\"headerlink\" title=\"二分图的判定方法: 黑白染色法 + dfs(深度优先搜索)\"></a>二分图的判定方法: 黑白染色法 + dfs(深度优先搜索)</h4><p>我们可以把黑白染色法看成一个向外拓展的过程</p>\n<p>我们可以先把一个点标为1,那么根据二分图的性质我们只能在1这个点的周围全部标为2,再把拓展出的2周围所有的点标为1,再把拓展出的1周围所有点标为2······</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n    <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//col[i] = 0 代表i点还没被分到左边</span>\n    <span class=\"token comment\">//col[i] = 1 代表i点分到了左边</span>\n\n    col<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span><span class=\"token comment\">//队列里面存的点是那些周围点需要被标记的点</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>   \n        <span class=\"token keyword\">int</span> now <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                col<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> col<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> col<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"图的存储方法\"><a href=\"#图的存储方法\" class=\"headerlink\" title=\"图的存储方法-\"></a>图的存储方法-</h2><h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码(无边权的图)</span>\n <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        z<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//z[e][s] = 1无向图再加上这个</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//核心代码(有边权的图)</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    z<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//z[e][s] = 1无向图再加上这个</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>优点和缺点:</p>\n<p>优点: 1. 好写 2.查询(i,j)复杂度O(1)</p>\n<p>缺点: 1.占用空间大 2.不可以处理重边</p>\n<h3 id=\"边表\"><a href=\"#边表\" class=\"headerlink\" title=\"边表\"></a>边表</h3><hr>\n<h4 id=\"主代码\"><a href=\"#主代码\" class=\"headerlink\" title=\"主代码\"></a>主代码</h4><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxm <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>en<span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//n代表点数,m代表边数</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">//e代表这条边的终点,d代表这条边的长度</span>\n    <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">//链表里下一条边的编号</span>\n<span class=\"token punctuation\">&#125;</span>ed<span class=\"token punctuation\">[</span>maxm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    en<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    ed<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//ed[en].d=d;(如果边有权值加上这个)</span>\n    ed<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    first<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> en<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//d为边的权值 具体使用到题目</span>\n        <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><p>优点和缺点:</p>\n<p>优点: 1.占用空间小 2.可以处理重边</p>\n<p>缺点: 1.不好写 2.查询(i,j)O(n)</p>\n<hr>\n<h4 id=\"遍历边操作\"><a href=\"#遍历边操作\" class=\"headerlink\" title=\"遍历边操作\"></a>遍历边操作</h4><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//核心代码</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d \"</span><span class=\"token punctuation\">,</span>now<span class=\"token punctuation\">,</span>ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></h2><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The End\"></a>The End</h1>","text":"图论基础图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set). 有向图: 可以从1→2，但不可以从2→1 无向图: 可以从1→2，也可以从2→1 有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">图论基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%9A%84%E5%AE%9A%E4%B9%89-%E5%9B%BEG%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E5%BA%8F%E4%BA%8C%E5%85%83%E7%BB%84-V-G-%E5%85%B6%E4%B8%ADV%E7%A7%B0%E4%B8%BA%E7%82%B9%E9%9B%86-Vertices-Set-E%E7%A7%B0%E4%B8%BA%E8%BE%B9%E9%9B%86-Edges-set\"><span class=\"toc-text\">图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set).</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%90%91%E5%9B%BE%E3%80%81%E6%97%A0%E5%90%91%E5%9B%BE-%E5%A6%82%E6%9E%9C%E7%BB%99%E5%9B%BE%E7%9A%84%E6%AF%8F%E6%9D%A1%E8%BE%B9%E8%A7%84%E5%AE%9A%E4%B8%80%E4%B8%AA%E6%96%B9%E5%90%91%EF%BC%8C%E9%82%A3%E4%B9%88%E5%BE%97%E5%88%B0%E7%9A%84%E5%9B%BE%E7%A7%B0%E4%B8%BA%E6%9C%89%E5%90%91%E5%9B%BE-%E5%9C%A8%E6%9C%89%E5%90%91%E5%9B%BE%E4%B8%AD%EF%BC%8C%E4%B8%8E%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E8%BE%B9%E6%9C%89%E5%87%BA%E8%BE%B9%E5%92%8C%E5%85%A5%E8%BE%B9%E4%B9%8B%E5%88%86-%E7%9B%B8%E5%8F%8D%EF%BC%8C%E8%BE%B9%E6%B2%A1%E6%9C%89%E6%96%B9%E5%90%91%E7%9A%84%E5%9B%BE%E7%A7%B0%E4%B8%BA%E6%97%A0%E5%90%91%E5%9B%BE%E3%80%82\"><span class=\"toc-text\">有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图.在有向图中，与一个节点相关联的边有出边和入边之分.相反，边没有方向的图称为无向图。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">图的概念:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%A6-Degree-%E4%B8%80%E4%B8%AA%E9%A1%B6%E7%82%B9%E7%9A%84%E5%BA%A6%E6%98%AF%E6%8C%87%E4%B8%8E%E8%AF%A5%E9%A1%B6%E7%82%B9%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E8%BE%B9%E7%9A%84%E6%9D%A1%E6%95%B0%EF%BC%8C%E9%A1%B6%E7%82%B9v%E7%9A%84%E5%BA%A6%E8%AE%B0%E4%BD%9Cd-v-%E3%80%82%E5%8D%B3%E4%B8%80%E4%B8%AA%E7%82%B9%E8%BF%9E%E6%8E%A5%E4%BA%86%E5%A4%9A%E5%B0%91%E6%9D%A1%E8%BE%B9%E3%80%82-%E4%BD%8F%EF%BC%9A%E5%BA%A6%E4%B8%80%E8%88%AC%E6%98%AF%E9%92%88%E5%AF%B9%E6%97%A0%E5%90%91%E5%9B%BE\"><span class=\"toc-text\">度(Degree):一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d(v)。即一个点连接了多少条边。(住：度一般是针对无向图)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%BA%A6-In-drgree-%E5%92%8C%E5%87%BA%E5%BA%A6-Out-degree-%E5%AF%B9%E4%BA%8E%E6%9C%89%E5%90%91%E5%9B%BE%E6%9D%A5%E8%AF%B4-%E4%B8%80%E4%B8%AA%E9%A1%B6%E7%82%B9%E7%9A%84%E5%BA%A6%E5%8F%AF%E7%BB%86%E5%88%86%E4%B8%BA%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6%E3%80%82%E4%B8%80%E4%B8%AA%E9%A1%B6%E7%82%B9%E7%9A%84%E7%9A%84%E5%85%A5%E5%BA%A6%E6%98%AF%E6%8C%87%E4%B8%8E%E5%85%B6%E5%85%B3%E8%81%94%E7%9A%84%E5%90%84%E8%BE%B9%E4%B9%8B%E4%B8%AD%EF%BC%8C%E4%BB%A5%E5%85%B6%E4%B8%BA%E7%BB%88%E7%82%B9%E7%9A%84%E8%BE%B9%E6%95%B0-%E5%87%BA%E5%BA%A6%E5%88%99%E6%98%AF%E7%9B%B8%E5%AF%B9%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%8C%87%E4%BB%A5%E8%AF%A5%E9%A1%B6%E7%82%B9%E4%B8%BA%E8%B5%B7%E7%82%B9%E7%9A%84%E8%BE%B9%E6%95%B0%E3%80%82-%E6%B3%A8%EF%BC%9A%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6%E4%B8%80%E8%88%AC%E9%92%88%E5%AF%B9%E6%9C%89%E5%90%91%E5%9B%BE\"><span class=\"toc-text\">入度(In-drgree)和出度(Out-degree):对于有向图来说,一个顶点的度可细分为入度和出度。一个顶点的的入度是指与其关联的各边之中，以其为终点的边数;出度则是相对的概念，指以该顶点为起点的边数。(注：入度和出度一般针对有向图)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%8E%AF-Loop-%E8%8B%A5%E4%B8%80%E6%9D%A1%E8%BE%B9%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%A1%B6%E7%82%B9%E4%B8%BA%E5%90%8C%E4%B8%80%E9%A1%B6%E7%82%B9%EF%BC%8C%E5%88%99%E6%AD%A4%E8%BE%B9%E7%A7%B0%E4%BD%9C%E8%87%AA%E7%8E%AF%E3%80%82%E5%8D%B3%E4%B8%80%E4%B8%AA%E7%82%B9%E7%9A%84%E8%B5%B7%E7%82%B9%E5%92%8C%E7%BB%88%E7%82%B9%E9%83%BD%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E7%82%B9\"><span class=\"toc-text\">自环(Loop):若一条边的两个顶点为同一顶点，则此边称作自环。即一个点的起点和终点都是同一个点.</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E5%BE%84-Path\"><span class=\"toc-text\">路径(Path):</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%8E%AF-%E9%A6%96%E5%B0%BE%E7%9B%B8%E8%BF%9E%E7%9A%84%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">环:首尾相连的路径</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84%E5%9B%BE\"><span class=\"toc-text\">特殊的图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E6%9C%89%E7%8E%AF%E7%9A%84%E6%97%A0%E5%90%91%E5%9B%BE-%E6%A0%91\"><span class=\"toc-text\">没有环的无向图:树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%B4%A8%EF%BC%9A1-%E8%BF%9E%E9%80%9A-2-%E6%97%A0%E7%8E%AF-3-%E6%97%A0%E5%90%91\"><span class=\"toc-text\">性质：1.连通    2.无环    3.无向</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%AA%E6%BB%A1%E8%B6%B3%E6%97%A0%E7%8E%AF%E5%92%8C%E6%97%A0%E5%90%91%E7%9A%84%E8%AF%9D%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%B0%86%E8%BF%99%E7%A7%8D%E5%9B%BE%E5%8F%AB%E5%81%9A%E6%A3%AE%E6%9E%97\"><span class=\"toc-text\">如果树的性质只满足无环和无向的话那么我们将这种图叫做森林</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%AA%E6%BB%A1%E8%B6%B3%E8%BF%9E%E9%80%9A%E5%92%8C%E6%97%A0%E7%8E%AF%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0%E6%9C%89%E5%90%91%E6%A0%91\"><span class=\"toc-text\">如果树的性质只满足连通和无环那么我们可以得到有向树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%90%91%E6%A0%91%E5%8F%AF%E4%BB%A5%E5%88%86%E4%B8%BA%E5%A4%96%E5%90%91%E6%A0%91%E5%92%8C%E5%86%85%E5%90%91%E6%A0%91-%E6%9C%89%E5%90%91%E6%A0%91%E5%92%8C%E6%97%A0%E5%90%91%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5%E9%83%BD%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E6%96%B9%E5%90%91%E5%86%B3%E5%AE%9A%E7%9A%84\"><span class=\"toc-text\">有向树可以分为外向树和内向树(有向树和无向树的概念都是相对于方向决定的)</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%AA%E6%BB%A1%E8%B6%B3%E8%BF%9E%E9%80%9A%E5%92%8C%E6%97%A0%E5%90%91%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0%E6%95%B0%E7%9A%84%E6%8B%93%E5%B1%95%E5%9B%BE%E2%80%94%E2%80%94%E7%AB%A0%E9%B1%BC%E5%9B%BE-%E7%AB%A0%E9%B1%BC%E5%9B%BE%E4%B8%80%E5%AE%9A%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%8E%AF-%EF%BC%9B\"><span class=\"toc-text\">如果树的性质只满足连通和无向那么我们可以得到数的拓展图——章鱼图(章鱼图一定存在一个环)；</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E6%9C%89%E4%B8%80%E4%B8%AA%E7%8E%AF%EF%BC%8C%E4%BB%8E%E6%AF%8F%E4%B8%AA%E7%82%B9%E5%BB%B6%E4%BC%B8%E5%87%BA%E5%8E%BB%E7%9A%84%E9%83%A8%E5%88%86%E9%83%BD%E6%98%AF%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E5%9B%BE%E8%BF%99%E7%A7%8D%E5%9B%BE%E6%88%91%E4%BB%AC%E6%8A%8A%E5%AE%83%E5%8F%AB%E5%81%9A%E7%AB%A0%E9%B1%BC%E5%9B%BE-%E5%91%A8%E5%9B%B4%E7%9A%84%E6%A0%91%E6%B2%A1%E6%9C%89%E7%8E%AF\"><span class=\"toc-text\">中间有一个环，从每个点延伸出去的部分都是一颗树的图这种图我们把它叫做章鱼图(周围的树没有环)</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89-%E6%A0%B9%EF%BC%8C%E5%84%BF%E5%AD%90%EF%BC%8C%E7%88%B6%E4%BA%B2%EF%BC%8C%E7%88%B7%E7%88%B7%EF%BC%8C%E7%A5%96%E5%85%88%EF%BC%8C%E6%B7%B1%E5%BA%A6-%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">树的基本定义:根，儿子，父亲，爷爷，祖先，深度,叶子节点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E8%8A%82%E7%82%B9-%E6%9C%80%E4%B8%8A%E9%9D%A2%E7%9A%84%E8%8A%82%E7%82%B9%E3%80%82\"><span class=\"toc-text\">根节点:最上面的节点。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%84%BF%E5%AD%90%E8%8A%82%E7%82%B9-%E5%90%91%E4%B8%8B%E8%B5%B0%E7%9A%84%E4%B8%8B%E4%B8%80%E6%8E%92%E7%82%B9%E3%80%82\"><span class=\"toc-text\">儿子节点:向下走的下一排点。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%88%B6%E4%BA%B2%E8%8A%82%E7%82%B9-%E5%90%91%E4%B8%8A%E8%B5%B0%E4%B8%80%E6%AD%A5%E7%9A%84%E7%82%B9%E3%80%82\"><span class=\"toc-text\">父亲节点:向上走一步的点。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%88%B7%E7%88%B7%E8%8A%82%E7%82%B9%EF%BC%9A%E4%BB%8E%E4%B8%80%E4%B8%AA%E7%82%B9%E5%90%91%E4%B8%8A%E8%B5%B0%E4%B8%A4%E6%AD%A5%E7%9A%84%E7%82%B9%E3%80%82\"><span class=\"toc-text\">爷爷节点：从一个点向上走两步的点。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A5%96%E5%85%88%EF%BC%9A%E4%BB%8E%E8%AF%A5%E7%82%B9%E5%BC%80%E5%A7%8B%E8%B5%B0%E5%88%B0%E6%A0%B9%E8%8A%82%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E7%82%B9%E3%80%82\"><span class=\"toc-text\">祖先：从该点开始走到根节点的所有点。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6-%E5%AE%9A%E4%B9%89%E6%A0%B9%E8%8A%82%E7%82%B9%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%B8%BA1%EF%BC%8C%E9%80%89%E5%AE%9A%E7%9A%84%E7%82%B9%E5%9C%A8%E7%AC%AC%E5%87%A0%E5%B1%82%E5%B0%B1%E6%98%AF%E6%B7%B1%E5%BA%A6%E3%80%82\"><span class=\"toc-text\">深度:定义根节点的深度为1，选定的点在第几层就是深度。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9-%E6%B2%A1%E6%9C%89%E5%84%BF%E5%AD%90%E7%9A%84%E8%8A%82%E7%82%B9%E3%80%82\"><span class=\"toc-text\">叶子节点:没有儿子的节点。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E5%9B%BE\"><span class=\"toc-text\">二分图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%B4%A8%EF%BC%9A\"><span class=\"toc-text\">性质：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%9A%84%E5%9B%BE%E4%B8%AD%E7%9A%84%E4%BA%8C%E5%88%86%E5%9B%BE%EF%BC%9A\"><span class=\"toc-text\">特殊的图中的二分图：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">二分图的判定方式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A%E6%96%B9%E6%B3%95-%E9%BB%91%E7%99%BD%E6%9F%93%E8%89%B2%E6%B3%95-dfs-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">二分图的判定方法: 黑白染色法 + dfs(深度优先搜索)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">图的存储方法-</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5\"><span class=\"toc-text\">邻接矩阵</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%B9%E8%A1%A8\"><span class=\"toc-text\">边表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">主代码</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\nconst int maxn &#x3D; 1e5+10;\nconst int maxm &#x3D; 2e5+10;\n\nint n,m,en,first[maxn];&#x2F;&#x2F;n代表点数,m代表边数\n\nstruct edge{\n    int e,d;&#x2F;&#x2F;e代表这条边的终点,d代表这条边的长度\n    int next;&#x2F;&#x2F;链表里下一条边的编号\n}ed[maxm];\n\nvoid add_edge(int s,int e,int d){\n    en++;\n    ed[en].e&#x3D;e;&#x2F;&#x2F;ed[en].d&#x3D;d;(如果边有权值加上这个)\n    ed[en].next &#x3D; first[s];\n    first[s] &#x3D; en;\n}\n\nint main(){\n    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);\n    for(int i &#x3D; 1;i &lt;&#x3D; m;i++){\n        int s,e,d;\n        scanf(&quot;%d%d%d&quot;,&amp;s,&amp;e,&amp;d);&#x2F;&#x2F;d为边的权值 具体使用到题目\n        add_edge(s,e,d);\n    }\t\n}</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E8%BE%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">遍历边操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-1\"><span class=\"toc-text\">&#x2F;&#x2F;核心代码\nfor(int p &#x3D; first[now];p !&#x3D; 0;p &#x3D; ed[p].next)\n    printf(&quot;%d %d &quot;,now,ed[p].e);</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#The-End\"><span class=\"toc-text\">The End</span></a></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"基础数据结构","uid":"7ff326fdf142ec1868a8e7b87c57157c","slug":"基础数据结构","date":"2021-09-16T12:40:16.000Z","updated":"2021-09-16T12:41:19.043Z","comments":true,"path":"api/articles/基础数据结构.json","keywords":null,"cover":null,"text":"基础数据结构链表:因为数组的插入和删除很慢，所以我们引入了链表这个概念,那么链表是什么样的一个数据结构呢? 定义:每一个元素都有箭头指向下一个元素,同理每一个元素都有箭头指向上一个元素,即 依靠箭头把n个数连接起来的一个数据结构 代码实现(包括插入和删除) cpp //核心代码 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"},{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":1,"path":"api/tags/队列.json"},{"name":"STL","slug":"STL","count":1,"path":"api/tags/STL.json"},{"name":"树","slug":"树","count":1,"path":"api/tags/树.json"},{"name":"二叉树","slug":"二叉树","count":1,"path":"api/tags/二叉树.json"},{"name":"堆","slug":"堆","count":1,"path":"api/tags/堆.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"前缀和与差分","uid":"f65c2271ed43cdf14e2eea3c0c440d44","slug":"前缀和与差分","date":"2021-09-16T12:34:33.000Z","updated":"2021-09-16T12:38:37.371Z","comments":true,"path":"api/articles/前缀和与差分.json","keywords":null,"cover":null,"text":"前缀和问题引入给定n个数a1,a2,a3,……an,有m次询问操作,给定l和r,求al ~ ar的和为多少要想求这个问题,我们需要知道a的前缀和为多少 $我们令b_1 = a_1,b_2 = a_1 + a_2,b_3 = a_1 + a_2 + a_3,……b_k = a_1 ...","link":"","photos":[],"count_time":{"symbolsCount":902,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"前缀和","slug":"前缀和","count":1,"path":"api/tags/前缀和.json"},{"name":"差分","slug":"差分","count":1,"path":"api/tags/差分.json"},{"name":"小技巧","slug":"小技巧","count":1,"path":"api/tags/小技巧.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}