{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T09:42:25.724Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"content":"<h1 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h1><ul>\n<li>给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。</li>\n<li>$1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。</li>\n<li>$1\\to 2$,$2 \\to 1$ 则无解</li>\n</ul>\n<ul>\n<li>有环的图一定没有拓扑排序</li>\n<li>结论：对有向无环图($DAG$)，一定有拓扑序</li>\n</ul>\n<p>$Code:$</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">伪代码:\naddedge(u,v):deg[v]++\n\nqueue<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>int</span><span class=\"token punctuation\">></span></span> Q;\n\nfor i in graph:\n\t\t\tif deg[i] = 0;\n\t\t\t\t\t\tQ.push(i)\nwhile Q not empty:\n\t\t\tu = Q.front();\n\t\t\tQ.pop();\n\t\t\ta[++cnt] = u;\nfor(u -> v) in graph:\n\t\t\t--deg[v];\n\t\t\tif deg[v] == 0;\n\t\t\tQ.push(v);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>每次选一个入度为$0$的点，加到拓扑排序末尾，然后在原图里删掉这个点和它的所有初边。</li>\n</ul>\n<ul>\n<li>算法结束时，如果还有点没被删除，说明图中有环</li>\n<li> $DAG$为什么一定有拓扑序</li>\n<li>数学归纳法：假设点数为$n-1$的图成立，推到点数为$n$时成立。</li>\n</ul>\n<ul>\n<li><p>$Directing\\  Edges(CF1385E)$​</p>\n<ul>\n<li>给定一个$n$个点混合图，有$m$条有向边和$k$条无向边。给无向边定向，使它成为$DAG$，或判断无解。</li>\n<li>$m,m,k \\le$</li>\n<li>把只包含有向边的图拓扑排序</li>\n<li>无向边按照拓扑排序定向</li>\n</ul>\n</li>\n<li><p>$DAG$最长链</p>\n<ul>\n<li>给定一个$DAG$,每个点有权值(可以是负数),问选一条链，权值和最大是多少。</li>\n<li><strong>不懂</strong></li>\n</ul>\n</li>\n<li><p>传递闭包</p>\n<ul>\n<li>给定一个$n$个点m条边的DAG，对每个点求出它能到达多少点</li>\n<li>$n,m \\le 10^5$</li>\n<li><strong>题解：</strong>记$S_u$为$u$能到达的点集。</li>\n<li>按拓扑排序倒序转移:$S_u = {u} + U_{i \\to v}S_v$</li>\n<li>看成二进制数,用$bitset$优化</li>\n<li>时间$O（\\frac{nm}{w}）$，在64位机上$w = 64$​</li>\n</ul>\n</li>\n<li><p>$Reboot\\  from\\  Blue(lg 7480)$</p>\n<ul>\n<li>数轴上有n个加油站,第i个为于$x_i$,油价为每升c_i元</li>\n<li>起点坐标s，终点t，车油箱一开始是空的，且保证起点处有加油站，假设箱子容量无限大，一升油可以走距离1</li>\n<li>求出最小花费</li>\n<li>$1 \\le n \\le 10^5$,$-10^9 \\le x_i,s,t \\le 10^9,s &lt; t$</li>\n<li>**题解:**可能会往回走</li>\n<li>最优策略：每次刚好跑到一个油钱更小的加油站</li>\n<li>单调栈求左右两边第一个油钱更小的加油站，连边</li>\n<li>连出一个$DAG$，跑s到所有点到最段路，用它更新答案</li>\n<li>不用跑最短路，直接跑$dp$​</li>\n</ul>\n</li>\n<li><p>最小拓扑序</p>\n<ul>\n<li>求$DAG$拓扑序中字典序最小的</li>\n<li>**题解:**用小根堆存入度为0的点，每次取出最小的</li>\n</ul>\n</li>\n<li><p>树的拓扑排序个数</p>\n<ul>\n<li>给定一颗外向树,问拓扑排序个数</li>\n<li>$n \\le 10^6$</li>\n<li>**题解:**给每个点$i$一个标号$p_i$,表示它在拓扑序中出现的位置。</li>\n<li>对每条边$u \\to v$,都要满足$p_u \\le p_v$</li>\n<li>$dfs(x,S):$决定x子树内的标号，每个点的标号都在集合S中取。</li>\n<li>先给$x$标上$S$中的最小元素,并在S中删除这个元素。</li>\n<li>再将$S$分配给每个儿子的子树，递归调用$dfs(y,S’)$​。</li>\n<li>方案数:$\\prod_{x} \\frac{(size[x] - 1)!}{\\prod_{y \\in sons(x)}(size[y])!}$</li>\n<li>化简:$\\frac{n!}{\\prod_{x}size[x]}$​</li>\n<li>概率角度：点x的标号为集合中最小的数的概率为$\\frac{1}{size[x]}$​。</li>\n</ul>\n</li>\n<li><p>拓扑序计数</p>\n<ul>\n<li>给定$n$个点$m$条边的有向图，每条边可能出现/不出现，对所有$2^m$种情况，求图中拓扑排序个数的和。</li>\n<li>$n \\le 20$</li>\n<li><strong>不懂</strong></li>\n</ul>\n</li>\n<li><p>新题目</p>\n<ul>\n<li>有$n$个变量$x_1,\\cdots,x_n$，全都是正整数，给定$m$条$x_i &lt; x_j$的关系，求所有合法解中，$x$最大值的最小值</li>\n</ul>\n</li>\n<li><p>牛x的点</p>\n<ul>\n<li>给定一个n个点m条边的DAG面对每个点x，判断它是否满足：对于图中任意一点y要么从x能到y，要么从y能到x。</li>\n<li>$n,m \\le 10^6$</li>\n<li><strong>不懂</strong></li>\n</ul>\n</li>\n<li><p>庆典 ($NOI\\  2021\\  D1T3$​​)</p>\n<ul>\n<li><strong>不懂</strong></li>\n</ul>\n</li>\n<li><p>$Insider’s \\  Infromation$​</p>\n<ul>\n<li>有一个排列满足m条形如$\\lceil y$出现在$x,z$之间的限制$\\rfloor$ ，现在你需要构造一个排列满足至少$\\lceil \\frac{m}{2} \\rceil$个限制</li>\n</ul>\n</li>\n<li><p>$DAG$重链剖分</p>\n<ul>\n<li>给一个字符串S，令T是S的所有非空子序列的集合（相同的子序列会被去重）</li>\n<li>比如apia的子序列为{a,aa,ai,aia,ap,apa,api,apia,i,ia,p,pa,pi,pia}</li>\n<li>有Q个询问，回答字典序从小到大第k的子序列后p个字符，不如第10个子序列为ia</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h1 id=\"2-SAT\"><a href=\"#2-SAT\" class=\"headerlink\" title=\"2-SAT\"></a>2-SAT</h1><ul>\n<li><p>一些问题看着像2-SAT，实际上不能做</p>\n<ul>\n<li>最大一个数</li>\n<li>1个数能否超过一半</li>\n<li>等等</li>\n</ul>\n</li>\n<li><p>给定n个点m条边的无向图，每个点选一个邻边，不能重复选，构造一组解</p>\n<ul>\n<li>可以2-SAT，但没必要</li>\n</ul>\n</li>\n<li><p>$Radio\\  Stations$​​</p>\n<ul>\n<li><p>有 $n$ 个电台，频段在 $[l(i), r(i)]$ 之间。</p>\n</li>\n<li><p>由你在 $[1, m]$ 中选频段 $f$。区间不包含 $f$ 的电台不能被启用。</p>\n</li>\n<li><p>给$k$条限制，有两种：</p>\n</li>\n<li><ul>\n<li>$1$.电台$u$和$v$至少选一个</li>\n<li>$2$.电台$u$和$v$不能同时选</li>\n</ul>\n</li>\n<li><p>输出$f$和选择方案。</p>\n</li>\n<li><p>$n, m, k &lt;= 4×10^5$​</p>\n</li>\n</ul>\n</li>\n<li><p>编码(loj 6036)</p>\n<ul>\n<li>有 $n$ 个二进制串，每个串有一位是 ?</li>\n<li>你要给 $?$ 填上 $0/1$，使得不存在 $i, j$ 使 $s[i]$ 是 $s[j]$ 的前缀</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Practice\"><a href=\"#Practice\" class=\"headerlink\" title=\"Practice\"></a>Practice</h1><h4 id=\"Knights-of-the-Round-Table-POJ-2942\"><a href=\"#Knights-of-the-Round-Table-POJ-2942\" class=\"headerlink\" title=\"Knights of the Round Table (POJ 2942)\"></a>Knights of the Round Table (POJ 2942)</h4><p>有 $n$ 个骑士，有 $m$ 对骑士相互憎恨。骑士可能召开圆桌会议，骑士们围绕着圆桌而坐，需要满足</p>\n<ul>\n<li>骑士的个数是大于 $1$ 的奇数。</li>\n<li>任何相邻的一对骑士都不相互憎恨。</li>\n</ul>\n<p>求有多少骑士不可能参加任何圆桌会议。</p>\n<p>$1\\le n\\le 1,000$<br>$1\\le m\\le {n\\choose 2}$</p>\n<h4 id=\"Road-Construction-POJ-3352\"><a href=\"#Road-Construction-POJ-3352\" class=\"headerlink\" title=\"Road Construction (POJ 3352)\"></a>Road Construction (POJ 3352)</h4><p>有一个岛上有 $n$ 个旅游景点，有 $m$ 条双向道路连接着它们。现在要修建一些额外的道路，使得任意一条道路封闭后游客都能从一个旅游景点到达任意的旅游景点。求最少需要修建的道路数量。</p>\n<p>$3\\le n\\le 1,000$<br>$2\\le m\\le 1,000$</p>\n<h4 id=\"Mining-Your-Own-Business-UVA-1108\"><a href=\"#Mining-Your-Own-Business-UVA-1108\" class=\"headerlink\" title=\"Mining Your Own Business (UVA 1108)\"></a>Mining Your Own Business (UVA 1108)</h4><p>有一张无向图，选一些点涂黑，满足任意删除一个点后（可能是被涂黑的点），每个连通分量都有至少一个黑点。求最少涂黑的点数和方案数。</p>\n<p>$1\\le n\\le 50,000$</p>\n<h4 id=\"Equivalent-Sets-HDU-3836\"><a href=\"#Equivalent-Sets-HDU-3836\" class=\"headerlink\" title=\"Equivalent Sets (HDU 3836)\"></a>Equivalent Sets (HDU 3836)</h4><p>给定一张有向图，求至少添加多少条边能使得其强连通。</p>\n<p>$1\\le n\\le 20,000$<br>$0\\le m\\le 50,000$</p>\n<h4 id=\"Pursuit-For-Artifacts-CF652E\"><a href=\"#Pursuit-For-Artifacts-CF652E\" class=\"headerlink\" title=\"Pursuit For Artifacts (CF652E)\"></a>Pursuit For Artifacts (CF652E)</h4><p>给定一张简单无向连通图，边权为 $0$ 或 $1$，求从 $a$ 到 $b$ 是否存在一条边权和非 $0$ 的且不经过重复边的路径。</p>\n<p>$1\\le n\\le 300,000$<br>$0\\le m\\le 300,000$</p>\n<h4 id=\"Museums-Tour-CF1137C\"><a href=\"#Museums-Tour-CF1137C\" class=\"headerlink\" title=\"Museums Tour (CF1137C)\"></a>Museums Tour (CF1137C)</h4><p>一个国家有 $n$ 个城市，和 $m$ 条单向道路，每周有 $d$ 天。每个城市都有一个博物馆，每天博物馆的开放情况只和是一周中的哪一天有关，即每 $d$ 天一个循环。</p>\n<p>从一周中的第一天，城市 $1$ 开始，每天参观博物馆（如果开放），之后沿着一条边走到下一个城市。求无限的时间内最多能参观多少不同的博物馆。</p>\n<p>$1\\le n\\le 100,000$<br>$0\\le m\\le 100,000$<br>$0\\le d\\le 50$</p>\n<h4 id=\"Leaders-CF97E\"><a href=\"#Leaders-CF97E\" class=\"headerlink\" title=\"Leaders (CF97E)\"></a>Leaders (CF97E)</h4><p>给定一张简单无向图，多次询问两个点之间是否存在长度为奇数的简单路径。</p>\n<p>$1\\le n\\le 100,000$<br>$0\\le m\\le 100,000$<br>$1\\le q\\le 100,000$</p>\n<h4 id=\"Simple-Cycles-Edges-CF962F\"><a href=\"#Simple-Cycles-Edges-CF962F\" class=\"headerlink\" title=\"Simple Cycles Edges (CF962F)\"></a>Simple Cycles Edges (CF962F)</h4><p>给定一张简单无向图，求哪些边在恰好一个简单环内。</p>\n<p>$1\\le n\\le 100,000$<br>$0\\le m\\le 100,000$</p>\n<h4 id=\"Caterpillar-CF51F\"><a href=\"#Caterpillar-CF51F\" class=\"headerlink\" title=\"Caterpillar (CF51F)\"></a>Caterpillar (CF51F)</h4><p>定义毛毛虫是一张无环图，满足存在一条路径使得每个点离这条路径的距离不超过 $1$。给定一张无向图，现在可以每次合并两个顶点使得图变成毛毛虫。求最少需要的操作数。</p>\n<p>$1\\le n\\le 2000$<br>$0\\le m\\le 10^5$</p>\n","feature":true,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">拓扑排序</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-SAT\"><span class=\"toc-text\">2-SAT</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Practice\"><span class=\"toc-text\">Practice</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Knights-of-the-Round-Table-POJ-2942\"><span class=\"toc-text\">Knights of the Round Table (POJ 2942)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Road-Construction-POJ-3352\"><span class=\"toc-text\">Road Construction (POJ 3352)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Mining-Your-Own-Business-UVA-1108\"><span class=\"toc-text\">Mining Your Own Business (UVA 1108)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Equivalent-Sets-HDU-3836\"><span class=\"toc-text\">Equivalent Sets (HDU 3836)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Pursuit-For-Artifacts-CF652E\"><span class=\"toc-text\">Pursuit For Artifacts (CF652E)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Museums-Tour-CF1137C\"><span class=\"toc-text\">Museums Tour (CF1137C)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Leaders-CF97E\"><span class=\"toc-text\">Leaders (CF97E)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Simple-Cycles-Edges-CF962F\"><span class=\"toc-text\">Simple Cycles Edges (CF962F)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Caterpillar-CF51F\"><span class=\"toc-text\">Caterpillar (CF51F)</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T09:40:56.191Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}