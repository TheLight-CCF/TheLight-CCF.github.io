{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T10:05:13.289Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><p>强连通</p>\n<ul>\n<li>强连通的定义</li>\n<li>强连通分量</li>\n<li>Tarjan 强连通分量算法</li>\n<li>强连通性的应用</li>\n</ul>\n</li>\n<li><p>边双连通</p>\n<ul>\n<li>边双连通分量的定义</li>\n<li>边双连通分量</li>\n<li>Tarjan 边双连通分量算法</li>\n<li>边双连通性的应用</li>\n</ul>\n</li>\n<li>点双连通<ul>\n<li>点双连通的定义</li>\n<li>点双连通分量</li>\n<li>Tarjan点双连通分量算法和圆方树</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"强连通\"><a href=\"#强连通\" class=\"headerlink\" title=\"强连通\"></a>强连通</h1><ul>\n<li><p>强连通的定义</p>\n<ul>\n<li>给定有向图$G = (V,E)。$</li>\n<li>对于$u,v \\in V$​，若$G$​中同时存在$u$​到$v$​的路径和$v$​到$u$​的路径，则称$u$​和$v$​​<strong>​强连通</strong>($strongly\\  connected$)</li>\n<li>对于任意的$u,v \\in V$都有$u$和$v$​强连通,则称有向图$G$<strong>强连通。</strong></li>\n</ul>\n</li>\n<li><p>强连通分量</p>\n<ul>\n<li>注意到顶点的强连通是一个等价关系。</li>\n<li>自反性:对任意的 $u \\in V$​，$u$和$u$强连通。</li>\n<li>对称性:对任意的$u,v \\in V$,若$u$和$v$强连通，则$v$和$u$​强连通。</li>\n<li>传递性:对于任意的$u,v,w \\in V$,若$u$和$v$强连通且$v$和$w$强连通，则$u \\to v \\to w$，$w \\to v \\to u$，因此$u$和$w$强连通</li>\n<li>(注意到顶点的强连通是一个等价关系)根据这个等价关系，我们可以将有向图 $G$​ 的顶点划分为若干个等价类，满足两顶点强连通 当且仅当它们在同一个等价类中。</li>\n</ul>\n<hr>\n<p><img src=\"/Users/DELL/Pictures/连通分量.png\" alt=\"强连通分量\" style=\"zoom:50%;\" /></p>\n<hr>\n</li>\n<li><p>$Tarjan$ 强连通分量算法</p>\n<ul>\n<li>$Tarjan$ 算法会对有向图 $G$ 进行一次 $DFS$，并维护一个栈，存储那些已经被访问但未被确定 所在强连通分量的顶点。</li>\n<li>$DFS$ 过程中的搜索树会组成原图的一个生成森林。我们考虑强连通分量 $C$ 的第一个被访问 的顶点 $u$，则 $C$ 的所有顶点都在$u$ 在搜索树上的子树中。</li>\n<li>我们希望栈中的所有访问完的顶点都存在一条到达栈中之前某个顶点的路径。如果顶点 $u$ 访问完后不存在这样的路径，则说明 $u$ 以及栈中在 $u$ 之后的点组成了一个强连通分量，而 $u$ 即为这个强连通分量的根。</li>\n<li>算法实现:<ul>\n<li>为了判断一个顶点是否存在到达栈中之前某个顶点的路径，我们对每个顶点维护下列变量:<ul>\n<li>$dfn(v)$，表示 $DFS$ 到 $v$ 的时间(也就是 $v$ 是第几个访问的顶点)。</li>\n<li>$low(v)$​​，表示从$v$​​ 经过子树中的顶点能到达的栈中顶点中最小的 $dfn$​​。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>$Code$</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">100010</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//adj[v] 存储 v 的所有后继</span>\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> adj<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dfn<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> inStack<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">strongConnect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//将dfn[v]和low[v] 设置为最小的还未使用的编号</span>\n\tdfn<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> low<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tinStack<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//访问v的后继</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token operator\">:</span>adj<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dfn<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//w还未被访问过，对其进行递归搜索</span>\n\t\t\t<span class=\"token function\">strongConnect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlow<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inStack<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">//w 在栈里，因此在当前的强连通分量内</span>\n\t\t\t<span class=\"token comment\">//如果w不在栈里，则说明w所在的强连通分量之前已经被确定了，因此需要忽略这条边</span>\n\t\t\t<span class=\"token comment\">//这里可以用low[w] 替换 dfn[w],同样是正确的</span>\n\t\t\t<span class=\"token comment\">//使用 dfn[w] 的原因是与另外的算法保持一致</span>\n\t\t\tlow<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dfn<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">//v是当前的强连通分量的根</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> dfn<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> scc<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tw <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tinStack<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\tscc<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//scc 即为当前的强连通分量，在这里对其进行必要的操作</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">tarjan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//顶点编号 0 ~ n-1</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> dfn<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dfn<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">strongConnect</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>强连通性的应用</p>\n<ul>\n<li><p>最优贸易</p>\n</li>\n<li><p>$C$​ 国有$n$​个城市$m$​条单向或双向道路连接着这些城市。保证每对城市之间至多只有一条道路。<br> 在每个城市可以以不同的价格购买或出售水晶球。商人阿龙想要从 $1$​ 号城市到达$n$​号城市，并在途中进行<strong>至多一次</strong>交易，即在某个城市买入水晶球，并在之后经过的某个城市出售。每 个城市和每条道路都可以多次经过。求出阿龙最多可以获得的利润，即售价减去买入价的差值的最大值。如果没有进行交易，则利润为$0$。</p>\n</li>\n<li><p>$1 \\le n \\le 100000$,$1 \\le m \\le 500000$​​​</p>\n<ul>\n<li><p>在本题中，可以将双向边看成两条有向边。</p>\n</li>\n<li><p>注意到在一个强连通分量中，可以在城市之间任意移动。我们可以将强连通分量缩成一个 点，保留其中最大和最小的价格，记为 $mx(u)$ 和 $mn(u)$。</p>\n</li>\n<li><p>缩完点之后，原图变成了一个$DAG$(有向无环图)，我们可以拓扑排序后进行$DP$。设 $f(u)$ 是从点$1$到达点$u$​的最大利润。转移如下</p>\n<script type=\"math/tex; mode=display\">mn(u) \\gets min(mn(u),mn(v)),for each (u,v) \\in E</script><script type=\"math/tex; mode=display\">f(u) \\gets max(f(u), f(v)), for each (v, u) ∈ E$$​\n\n$$f (u) \\gets max(f (u), mx(u) − mn(u))</script></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E8%BF%9E%E9%80%9A\"><span class=\"toc-text\">强连通</span></a></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T10:05:28.210Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"网络流选讲","uid":"005d78720b9e835a238af502516610c0","slug":"网络流选讲","date":"2021-09-16T09:40:18.000Z","updated":"2021-09-16T10:05:17.250Z","comments":true,"path":"api/articles/网络流选讲.json","keywords":null,"cover":null,"text":"网络流选讲网络流定义 一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量 $S \\in S’,T \\notin S’$​​,$E’ = (u,v) | u \\in S’,v \\notin S $​​​​ 最大流量 = 最小割 Ford-...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}