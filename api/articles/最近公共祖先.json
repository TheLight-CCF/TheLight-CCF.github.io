{"title":"最近公共祖先","uid":"4c36a9d56d2b10957f85952e1a221749","slug":"最近公共祖先","date":"2021-09-16T12:46:49.000Z","updated":"2021-09-16T12:52:13.195Z","comments":true,"path":"api/articles/最近公共祖先.json","keywords":null,"cover":[],"content":"<h1 id=\"最近公共祖先\"><a href=\"#最近公共祖先\" class=\"headerlink\" title=\"最近公共祖先\"></a>最近公共祖先</h1><h2 id=\"概念-对于有根树T的两个结点u、v，最近公共祖先LCA-T-u-v-表示一个结点x，满足x是u和v的祖先-且x的深度尽可能大。-即找两个节点共同的父节点\"><a href=\"#概念-对于有根树T的两个结点u、v，最近公共祖先LCA-T-u-v-表示一个结点x，满足x是u和v的祖先-且x的深度尽可能大。-即找两个节点共同的父节点\" class=\"headerlink\" title=\"概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点)\"></a>概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(<del>即找两个节点共同的父节点</del>)</h2><p><img src=\"https://fwnt-photo.oss-cn-shanghai.aliyuncs.com/light/TheLight%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LCA.png\" alt=\"\"></p>\n<p>例:6和7的LCA是2，3和7的LCA是1</p>\n<h2 id=\"LCA的求法\"><a href=\"#LCA的求法\" class=\"headerlink\" title=\"LCA的求法:\"></a>LCA的求法:</h2><h3 id=\"1-暴力\"><a href=\"#1-暴力\" class=\"headerlink\" title=\"1.暴力\"></a>1.暴力</h3><h4 id=\"让他们一步步向上找\"><a href=\"#让他们一步步向上找\" class=\"headerlink\" title=\"让他们一步步向上找\"></a>让他们一步步向上找</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//处理出now所有儿子节点的深度与父亲</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span>ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span>ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//now -- e</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">!=</span>f<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdepth<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>depth<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tf<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//暴力求LCA</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span><span class=\"token comment\">//O(n)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tp1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">!=</span>p2<span class=\"token punctuation\">)</span>\n\t\tp1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p2<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstdlib></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn<span class=\"token operator\">=</span><span class=\"token number\">100010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxm<span class=\"token operator\">=</span><span class=\"token number\">200010</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>en<span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>depth<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>ed<span class=\"token punctuation\">[</span>maxm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\ten<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\ted<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n\ted<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tfirst<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> en<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span>first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">=</span>ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span>ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span><span class=\"token comment\">//now -- e</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">!=</span>f<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdepth<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>depth<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\tf<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span><span class=\"token comment\">//O(n)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tp1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1<span class=\"token operator\">!=</span>p2<span class=\"token punctuation\">)</span>\n\t\tp1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p2<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tdepth<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//O(nm)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>显然这样时间复杂度很高,所以我们引入倍增求LCA</p>\n<h3 id=\"2-倍增求LCA\"><a href=\"#2-倍增求LCA\" class=\"headerlink\" title=\"2.倍增求LCA\"></a>2.倍增求LCA</h3><h4 id=\"所谓倍增就是按2的倍数跳着找，也就是1-2-4-8-16……，在这里我们要考虑从大到小跳-因为我们从小到大跳-就会出现回溯这种情况-因为我们不一定能精准的跳，而从大到小跳可以避开这种情况\"><a href=\"#所谓倍增就是按2的倍数跳着找，也就是1-2-4-8-16……，在这里我们要考虑从大到小跳-因为我们从小到大跳-就会出现回溯这种情况-因为我们不一定能精准的跳，而从大到小跳可以避开这种情况\" class=\"headerlink\" title=\"所谓倍增就是按2的倍数跳着找，也就是1,2,4,8,16……，在这里我们要考虑从大到小跳(因为我们从小到大跳,就会出现回溯这种情况,因为我们不一定能精准的跳，而从大到小跳可以避开这种情况)\"></a>所谓倍增就是按2的倍数跳着找，也就是1,2,4,8,16……，在这里我们要考虑从大到小跳(因为我们从小到大跳,就会出现回溯这种情况,因为我们不一定能精准的跳，而从大到小跳可以避开这种情况)</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//预处理</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">)</span><span class=\"token comment\">//处理出now所有儿子节点的深度与父亲</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> f<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            depth<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> depth<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//求LCA</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span><span class=\"token comment\">//O(n)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> p1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>p1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p2 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxm <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>en<span class=\"token punctuation\">,</span>first<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>depth<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//f[i]代表i向上走i的j次方步会走到哪里 depth[i]代表i号点的深度</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>ed<span class=\"token punctuation\">[</span>maxm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    en<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    ed<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n    ed<span class=\"token punctuation\">[</span>en<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    first<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> en<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">)</span><span class=\"token comment\">//处理出now所有儿子节点的深度与父亲</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> f<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            depth<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> depth<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> p2<span class=\"token punctuation\">)</span><span class=\"token comment\">//O(n)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> depth<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> p1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>p1<span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p2 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add_edge</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    depth<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//O(mn)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">get_lca</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"最近公共祖先概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点) 例:6和7的LCA是2，3和7的LCA是1 LCA的求法:1.暴力让他们一步步向上找//处理出now所有儿子节点...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"倍增","slug":"倍增","count":1,"path":"api/tags/倍增.json"},{"name":"LCA","slug":"LCA","count":1,"path":"api/tags/LCA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88\"><span class=\"toc-text\">最近公共祖先</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5-%E5%AF%B9%E4%BA%8E%E6%9C%89%E6%A0%B9%E6%A0%91T%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%BB%93%E7%82%B9u%E3%80%81v%EF%BC%8C%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88LCA-T-u-v-%E8%A1%A8%E7%A4%BA%E4%B8%80%E4%B8%AA%E7%BB%93%E7%82%B9x%EF%BC%8C%E6%BB%A1%E8%B6%B3x%E6%98%AFu%E5%92%8Cv%E7%9A%84%E7%A5%96%E5%85%88-%E4%B8%94x%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%A7%E3%80%82-%E5%8D%B3%E6%89%BE%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E5%85%B1%E5%90%8C%E7%9A%84%E7%88%B6%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LCA%E7%9A%84%E6%B1%82%E6%B3%95\"><span class=\"toc-text\">LCA的求法:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9A%B4%E5%8A%9B\"><span class=\"toc-text\">1.暴力</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A9%E4%BB%96%E4%BB%AC%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%90%91%E4%B8%8A%E6%89%BE\"><span class=\"toc-text\">让他们一步步向上找</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%80%8D%E5%A2%9E%E6%B1%82LCA\"><span class=\"toc-text\">2.倍增求LCA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%80%E8%B0%93%E5%80%8D%E5%A2%9E%E5%B0%B1%E6%98%AF%E6%8C%892%E7%9A%84%E5%80%8D%E6%95%B0%E8%B7%B3%E7%9D%80%E6%89%BE%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF1-2-4-8-16%E2%80%A6%E2%80%A6%EF%BC%8C%E5%9C%A8%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E8%A6%81%E8%80%83%E8%99%91%E4%BB%8E%E5%A4%A7%E5%88%B0%E5%B0%8F%E8%B7%B3-%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E4%BB%8E%E5%B0%8F%E5%88%B0%E5%A4%A7%E8%B7%B3-%E5%B0%B1%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%9B%9E%E6%BA%AF%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5-%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E4%B8%8D%E4%B8%80%E5%AE%9A%E8%83%BD%E7%B2%BE%E5%87%86%E7%9A%84%E8%B7%B3%EF%BC%8C%E8%80%8C%E4%BB%8E%E5%A4%A7%E5%88%B0%E5%B0%8F%E8%B7%B3%E5%8F%AF%E4%BB%A5%E9%81%BF%E5%BC%80%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5\"><span class=\"toc-text\">所谓倍增就是按2的倍数跳着找，也就是1,2,4,8,16……，在这里我们要考虑从大到小跳(因为我们从小到大跳,就会出现回溯这种情况,因为我们不一定能精准的跳，而从大到小跳可以避开这种情况)</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"生成树问题","uid":"650830902f7d1f1c6412622da735e342","slug":"生成树问题","date":"2021-09-16T12:47:44.000Z","updated":"2021-09-16T12:47:59.950Z","comments":true,"path":"api/articles/生成树问题.json","keywords":null,"cover":[],"text":"定义:给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树求最小生成树的解决方法思路: 我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2 那么我们来思考,最小生成树中是否一定包含权值最小的那一条边 答案是,一定...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最小生成树","slug":"最小生成树","count":1,"path":"api/tags/最小生成树.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"最短路径问题","uid":"665dc3c56673e4afdc879c20d4cbcde8","slug":"最短路径问题","date":"2021-09-16T12:44:06.000Z","updated":"2021-09-16T12:46:12.290Z","comments":true,"path":"api/articles/最短路径问题.json","keywords":null,"cover":null,"text":"最短路径问题最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。 松弛操作在讲松弛操作之前，我们要先明确一个事实 那就是在计算两点间的最短路时，通常不仅仅会算出两点间的最短路，而会把许多点之间的最短路一同算出来 那…… 这是为什么呐...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最短路","slug":"最短路","count":1,"path":"api/tags/最短路.json"},{"name":"Dijkstra","slug":"Dijkstra","count":1,"path":"api/tags/Dijkstra.json"},{"name":"SPFA","slug":"SPFA","count":1,"path":"api/tags/SPFA.json"},{"name":"Bellman-Ford","slug":"Bellman-Ford","count":1,"path":"api/tags/Bellman-Ford.json"},{"name":"三角不等式","slug":"三角不等式","count":1,"path":"api/tags/三角不等式.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}