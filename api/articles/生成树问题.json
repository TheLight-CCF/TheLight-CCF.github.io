{"title":"生成树问题","uid":"650830902f7d1f1c6412622da735e342","slug":"生成树问题","date":"2021-09-16T12:47:44.000Z","updated":"2021-09-16T12:47:59.950Z","comments":true,"path":"api/articles/生成树问题.json","keywords":null,"cover":[],"content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义:\"></a>定义:</h2><h3 id=\"给定一张n个点m条边的图-我们要从m条边当中选出n-1条边-使得选出来的n-1条边能和n个点组成一棵树\"><a href=\"#给定一张n个点m条边的图-我们要从m条边当中选出n-1条边-使得选出来的n-1条边能和n个点组成一棵树\" class=\"headerlink\" title=\"给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树\"></a>给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树</h3><h2 id=\"求最小生成树的解决方法\"><a href=\"#求最小生成树的解决方法\" class=\"headerlink\" title=\"求最小生成树的解决方法\"></a>求最小生成树的解决方法</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路:\"></a>思路:</h3><p><img src=\"http://hadimg.test.upcdn.net/Kruscal.png\" style=\"zoom:50%;\" /></p>\n<p>我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2</p>\n<p>那么我们来思考,最小生成树中是否一定包含权值最小的那一条边</p>\n<p>答案是,一定,那么我们怎么来思考这个问题呢</p>\n<p>我们可以用反证法来证明(假设下图就是上图的最小生成树(其实不是))</p>\n<p><img src=\"http://hadimg.test.upcdn.net/%E5%81%87%E8%AE%BE%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png\" style=\"zoom: 50%;\" /></p>\n<p>一开始我们假设最小的边不在最小生成树上,那么肯定有一条边会连接两个点(当然不是树上的一条边)例如:连接4 -&gt; 9</p>\n<p>连接之后我们会发现1 -&gt; 2 -&gt; 4 -&gt; 9 -&gt; 7 -&gt; 3 -&gt; 1形成了一个环,</p>\n<p>但由于我们自己连接的4 -&gt; 9 是最小的一条边,所以我们环上的每一条边都比我们连接的这条边要大;那么我们再来想,我们任意删除一条除了自己连接的边 例如:删掉3 -&gt; 7 那么剩下的这个图形是不是一棵树</p>\n<p>它是一颗树对吧,因为我们如果不删3 -&gt; 7这条边的话它就是一个章鱼图,而章鱼图只要随便删除环上一条边,那么他就又变回一颗树了</p>\n<p>我们把删去的3 -&gt; 7这条边的权值设为v1,把自己连接的4 -&gt; 9这条边的权值设为v2,设<strong>原来的总权值</strong>为t:</p>\n<p>那么我们新的这棵树的和为:t - v1 + v2</p>\n<p>∵v2是所有边中最小的 ∴ v1 &gt; v2 ∴t - v1 + v2 &lt; t</p>\n<h3 id=\"Kruscal算法\"><a href=\"#Kruscal算法\" class=\"headerlink\" title=\"Kruscal算法:\"></a><i>Kruscal</i>算法:</h3><p>基于最小生成树中一定包含权值最小的那一条边 我们可以从权值最小的那一条边开始选 那么我们可以把这张图按照从小到大排序 同时,我们如果想要选一条边那么我们要判断这张图会不会形成环</p>\n<p>基于上述思路,我们可以得出<i>Kruscal</i>的核心问题为:我们从小到大看这条边能不能选,如果能选就选上,如果不能选就把它跳过</p>\n<p>但如果我们要判断加入一条边会不会形成环,那么我们需要用到<strong>并查集</strong></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//完整代码</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdio></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxn <span class=\"token operator\">=</span> <span class=\"token number\">1e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> maxm <span class=\"token operator\">=</span> <span class=\"token number\">2e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//f为并查集</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span><span class=\"token comment\">//起点 终点 长度</span>\n<span class=\"token punctuation\">&#125;</span>ed<span class=\"token punctuation\">[</span>maxm<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span> <span class=\"token punctuation\">(</span>edge a<span class=\"token punctuation\">,</span>edge b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>d <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>ed<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ed<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>a <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//时间复杂度为O(mlogm)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span>e <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">,</span>d <span class=\"token operator\">=</span> ed<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> f1 <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f1 <span class=\"token operator\">!=</span> f2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>f1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">;</span><span class=\"token comment\">//进行合并</span>\n            ans<span class=\"token operator\">+=</span>d<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"次小生成树\"><a href=\"#次小生成树\" class=\"headerlink\" title=\"次小生成树\"></a>次小生成树</h3><h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路:\"></a>算法思路:</h4><h4 id=\"1-求最小生成树-2-枚举非树边-3-用倍增求用非树边替换哪条数边\"><a href=\"#1-求最小生成树-2-枚举非树边-3-用倍增求用非树边替换哪条数边\" class=\"headerlink\" title=\"1.求最小生成树    2.枚举非树边    3.用倍增求用非树边替换哪条数边\"></a>1.求最小生成树    2.枚举非树边    3.用倍增求用非树边替换哪条数边</h4>","feature":true,"text":"定义:给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树求最小生成树的解决方法思路: 我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2 那么我们来思考,最小生成树中是否一定包含权值最小的那一条边 答案是,一定...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最小生成树","slug":"最小生成树","count":1,"path":"api/tags/最小生成树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A%E4%B8%80%E5%BC%A0n%E4%B8%AA%E7%82%B9m%E6%9D%A1%E8%BE%B9%E7%9A%84%E5%9B%BE-%E6%88%91%E4%BB%AC%E8%A6%81%E4%BB%8Em%E6%9D%A1%E8%BE%B9%E5%BD%93%E4%B8%AD%E9%80%89%E5%87%BAn-1%E6%9D%A1%E8%BE%B9-%E4%BD%BF%E5%BE%97%E9%80%89%E5%87%BA%E6%9D%A5%E7%9A%84n-1%E6%9D%A1%E8%BE%B9%E8%83%BD%E5%92%8Cn%E4%B8%AA%E7%82%B9%E7%BB%84%E6%88%90%E4%B8%80%E6%A3%B5%E6%A0%91\"><span class=\"toc-text\">给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">求最小生成树的解决方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Kruscal%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Kruscal算法:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91\"><span class=\"toc-text\">次小生成树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">算法思路:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91-2-%E6%9E%9A%E4%B8%BE%E9%9D%9E%E6%A0%91%E8%BE%B9-3-%E7%94%A8%E5%80%8D%E5%A2%9E%E6%B1%82%E7%94%A8%E9%9D%9E%E6%A0%91%E8%BE%B9%E6%9B%BF%E6%8D%A2%E5%93%AA%E6%9D%A1%E6%95%B0%E8%BE%B9\"><span class=\"toc-text\">1.求最小生成树    2.枚举非树边    3.用倍增求用非树边替换哪条数边</span></a></li></ol></li></ol></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"矩阵","uid":"1109bb51ef1fe7597b5b03d20a7a9ddd","slug":"矩阵","date":"2021-09-16T12:48:18.000Z","updated":"2021-09-16T12:49:11.723Z","comments":true,"path":"api/articles/矩阵.json","keywords":null,"cover":null,"text":"在学习矩阵之前我们需要学习快速幂运算 快速幂前言快速幂的作用就是求$x^y$的值 思想也非常简单以前我们的$pow$函数时间复杂度为$O(y)$的这个函数是通过每次的乘法运算实现的例如:$x^{37}$ = $x \\cdot x \\cdot x \\cdot x \\cdot x …...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"数学","slug":"数学","count":4,"path":"api/tags/数学.json"},{"name":"矩阵","slug":"矩阵","count":1,"path":"api/tags/矩阵.json"},{"name":"快速幂","slug":"快速幂","count":1,"path":"api/tags/快速幂.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"最近公共祖先","uid":"4c36a9d56d2b10957f85952e1a221749","slug":"最近公共祖先","date":"2021-09-16T12:46:49.000Z","updated":"2021-09-16T12:52:13.195Z","comments":true,"path":"api/articles/最近公共祖先.json","keywords":null,"cover":[],"text":"最近公共祖先概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点) 例:6和7的LCA是2，3和7的LCA是1 LCA的求法:1.暴力让他们一步步向上找//处理出now所有儿子节点...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"倍增","slug":"倍增","count":1,"path":"api/tags/倍增.json"},{"name":"LCA","slug":"LCA","count":1,"path":"api/tags/LCA.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}