{"title":"网络流选讲","uid":"005d78720b9e835a238af502516610c0","slug":"网络流选讲","date":"2021-09-16T09:40:18.000Z","updated":"2021-09-16T10:05:17.250Z","comments":true,"path":"api/articles/网络流选讲.json","keywords":null,"cover":null,"content":"<h1 id=\"网络流选讲\"><a href=\"#网络流选讲\" class=\"headerlink\" title=\"网络流选讲\"></a>网络流选讲</h1><h2 id=\"网络流定义\"><a href=\"#网络流定义\" class=\"headerlink\" title=\"网络流定义\"></a>网络流定义</h2><ul>\n<li>一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量</li>\n<li>$S \\in S’,T \\notin S’$​​,$E’ =  (u,v) | u \\in S’,v \\notin S $​​​​</li>\n<li>最大流量 = 最小割</li>\n</ul>\n<h2 id=\"Ford-Fulkerson-算法\"><a href=\"#Ford-Fulkerson-算法\" class=\"headerlink\" title=\"Ford-Fulkerson 算法\"></a>Ford-Fulkerson 算法</h2><ul>\n<li>连上反向边之后每次dfs 贪心</li>\n</ul>\n<h2 id=\"Dinic-算法\"><a href=\"#Dinic-算法\" class=\"headerlink\" title=\"Dinic 算法\"></a>Dinic 算法</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>每次 bfs 先把图分层，然后在分层图上跑增广（多路增广+当前弧优化）。复杂度 $O(|V|^2 |E|)$。</li>\n<li>当然网络流存在最高标号预留推进（$HLPP$）等复杂度更优的做法，但是比较复杂。</li>\n</ul></blockquote>\n<h3 id=\"最大权闭合子图\"><a href=\"#最大权闭合子图\" class=\"headerlink\" title=\"最大权闭合子图\"></a>最大权闭合子图</h3><ul>\n<li>一个有向图，选择一个点就必须选择其后继点，且选择每个点有一个花费或者奖励。求总奖励最大值。<ul>\n<li>建$s$连向所有正权点，负权点连向$t$​，假设初始全选所有正权点，减掉最小割就是答案</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最小费用最大流\"><a href=\"#最小费用最大流\" class=\"headerlink\" title=\"最小费用最大流\"></a>最小费用最大流</h3><ul>\n<li>每条边有一个费用，每经过 1 的流量就会消耗固定的费用，求最大流时费用最小是多少。</li>\n<li>直接建反向边贪心即可，每次找最短的增广路。由于存在负权，复杂度为 $O(F|V||E|)$。</li>\n</ul>\n<h2 id=\"上下界网络流\"><a href=\"#上下界网络流\" class=\"headerlink\" title=\"上下界网络流\"></a>上下界网络流</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上下界可行流</p>\n<p>有源汇上下界最小流</p>\n<p>有源汇上下界最大流</p>\n<p>上下界最小费用可行流</p></blockquote>\n<h2 id=\"二分图匹配\"><a href=\"#二分图匹配\" class=\"headerlink\" title=\"二分图匹配\"></a>二分图匹配</h2><ul>\n<li>给定一个二分图，左侧n个点右侧m个点，求能选出多少条端点不重复的边</li>\n<li>可以用匈牙利算法$O(|V||E|)$解决。也可以用Dinic $O(|E|\\sqrt{|V|})$​</li>\n<li>$n$ - |最大匹配| = |最大独立集|</li>\n</ul>\n<h3 id=\"Hall-定理\"><a href=\"#Hall-定理\" class=\"headerlink\" title=\"Hall 定理\"></a>Hall 定理</h3><ul>\n<li>判断一个二分图存不存在完美匹配</li>\n<li><strong>内容:</strong> 二分图存在完美匹配当且仅当对于任意S，$|N(S)| \\ge |S|$($N(S)$表示从S连出的边另一端构成的点集)</li>\n</ul>\n<h3 id=\"匈牙利算法\"><a href=\"#匈牙利算法\" class=\"headerlink\" title=\"匈牙利算法\"></a>匈牙利算法</h3><ul>\n<li>每次贪心的找一条增广路，找不到就无解</li>\n</ul>\n<h3 id=\"二分图最大权匹配\"><a href=\"#二分图最大权匹配\" class=\"headerlink\" title=\"二分图最大权匹配\"></a>二分图最大权匹配</h3><h3 id=\"KM算法\"><a href=\"#KM算法\" class=\"headerlink\" title=\"KM算法\"></a>KM算法</h3><h3 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h3><ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P4001\">lg P4001</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P2762\">lg P2762</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P2763\">P2763 试题库问题</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P2766\">P2766 最长不下降子序列问题</a></li>\n<li><a href=\"https://www.luogu.com.cn/problem/P2774\">P2774 方格取数问题</a></li>\n</ul>\n<h2 id=\"万能建图方法\"><a href=\"#万能建图方法\" class=\"headerlink\" title=\"万能建图方法\"></a>万能建图方法</h2><ul>\n<li>利用代数推倒来建图</li>\n</ul>\n","feature":true,"text":"网络流选讲网络流定义 一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量 $S \\in S’,T \\notin S’$​​,$E’ = (u,v) | u \\in S’,v \\notin S $​​​​ 最大流量 = 最小割 Ford-...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%B5%81%E9%80%89%E8%AE%B2\"><span class=\"toc-text\">网络流选讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%B5%81%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">网络流定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Ford-Fulkerson-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Ford-Fulkerson 算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dinic-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Dinic 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE\"><span class=\"toc-text\">最大权闭合子图</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81\"><span class=\"toc-text\">最小费用最大流</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%B8%8B%E7%95%8C%E7%BD%91%E7%BB%9C%E6%B5%81\"><span class=\"toc-text\">上下界网络流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">二分图匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hall-%E5%AE%9A%E7%90%86\"><span class=\"toc-text\">Hall 定理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">匈牙利算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E6%9D%83%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">二分图最大权匹配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KM%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">KM算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98\"><span class=\"toc-text\">例题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%87%E8%83%BD%E5%BB%BA%E5%9B%BE%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">万能建图方法</span></a></li></ol></li></ol>","author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T10:05:13.289Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"优化技巧","uid":"e2573f345f8e369bd93647303f895691","slug":"优化技巧","date":"2021-09-16T09:39:54.000Z","updated":"2021-09-16T10:05:19.305Z","comments":true,"path":"api/articles/优化技巧.json","keywords":null,"cover":null,"text":"DP优化 $fi = min{i - l &lt; j &lt; i}(f_j + p_j) + p_i$​​ 使用单调队列优化 $fi = sum{i - l &lt; j &lt; i}(f_j + p_j) + p_i$ 使用前缀和优化 $fi = min{i - l &l...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}