{"name":"图论","slug":"图论","count":7,"postlist":[{"title":"topsort and 2-SAT","uid":"0366be0c07e758eb327e5de2aedcedbb","slug":"topsort-and-2-SAT","date":"2021-09-16T09:42:01.000Z","updated":"2021-09-16T12:28:37.471Z","comments":true,"path":"api/articles/topsort-and-2-SAT.json","keywords":null,"cover":null,"text":"拓扑排序 给定一个有向图，求出一个点的序列，使得对于每条边$u \\to v$都满足$u$在$v$的前面出现。 $1 \\to 2,1 \\to 3,2 \\to 4,3 \\to 4$,则$1,2,3,4$和$1,3,2,4$都合法。 $1\\to 2$,$2 \\to 1$ 则无解 有环的...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"图的强连通性质，桥，割点以及相关应用","uid":"43339b4e6d7b5864c06090c0390d8a24","slug":"图的强连通性质，桥，割点以及相关应用","date":"2021-09-16T09:40:45.000Z","updated":"2021-09-16T12:28:13.259Z","comments":true,"path":"api/articles/图的强连通性质，桥，割点以及相关应用.json","keywords":null,"cover":[],"text":"目录 强连通 强连通的定义 强连通分量 Tarjan 强连通分量算法 强连通性的应用 边双连通 边双连通分量的定义 边双连通分量 Tarjan 边双连通分量算法 边双连通性的应用 点双连通 点双连通的定义 点双连通分量 Tarjan点双连通分量算法和圆方树 强连通 强连通的定义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"强连通分量","slug":"强连通分量","count":1,"path":"api/tags/强连通分量.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"图论基础","uid":"2205e815a910486f8a5ae632a2606305","slug":"图论基础","date":"2021-09-16T12:38:58.000Z","updated":"2021-09-16T12:39:29.966Z","comments":true,"path":"api/articles/图论基础.json","keywords":null,"cover":[],"text":"图论基础图的定义:图G是一个有序二元组(V,G),其中V称为点集(Vertices Set),E称为边集(Edges set). 有向图: 可以从1→2，但不可以从2→1 无向图: 可以从1→2，也可以从2→1 有向图、无向图:如果给图的每条边规定一个方向，那么得到的图称为有向图...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"最短路径问题","uid":"665dc3c56673e4afdc879c20d4cbcde8","slug":"最短路径问题","date":"2021-09-16T12:44:06.000Z","updated":"2021-09-16T12:46:12.290Z","comments":true,"path":"api/articles/最短路径问题.json","keywords":null,"cover":null,"text":"最短路径问题最短路径问题是图论研究中的一个经典算法问题，旨在寻找图（由结点和路径组成的）中两结点之间的最短路径。 松弛操作在讲松弛操作之前，我们要先明确一个事实 那就是在计算两点间的最短路时，通常不仅仅会算出两点间的最短路，而会把许多点之间的最短路一同算出来 那…… 这是为什么呐...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最短路","slug":"最短路","count":1,"path":"api/tags/最短路.json"},{"name":"Dijkstra","slug":"Dijkstra","count":1,"path":"api/tags/Dijkstra.json"},{"name":"SPFA","slug":"SPFA","count":1,"path":"api/tags/SPFA.json"},{"name":"Bellman-Ford","slug":"Bellman-Ford","count":1,"path":"api/tags/Bellman-Ford.json"},{"name":"三角不等式","slug":"三角不等式","count":1,"path":"api/tags/三角不等式.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"最近公共祖先","uid":"4c36a9d56d2b10957f85952e1a221749","slug":"最近公共祖先","date":"2021-09-16T12:46:49.000Z","updated":"2021-09-16T12:52:13.195Z","comments":true,"path":"api/articles/最近公共祖先.json","keywords":null,"cover":[],"text":"最近公共祖先概念:对于有根树T的两个结点u、v，最近公共祖先LCA(T,u,v)表示一个结点x，满足x是u和v的祖先,且x的深度尽可能大。(即找两个节点共同的父节点) 例:6和7的LCA是2，3和7的LCA是1 LCA的求法:1.暴力让他们一步步向上找//处理出now所有儿子节点...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"倍增","slug":"倍增","count":1,"path":"api/tags/倍增.json"},{"name":"LCA","slug":"LCA","count":1,"path":"api/tags/LCA.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"生成树问题","uid":"650830902f7d1f1c6412622da735e342","slug":"生成树问题","date":"2021-09-16T12:47:44.000Z","updated":"2021-09-16T12:47:59.950Z","comments":true,"path":"api/articles/生成树问题.json","keywords":null,"cover":[],"text":"定义:给定一张n个点m条边的图,我们要从m条边当中选出n-1条边,使得选出来的n-1条边能和n个点组成一棵树求最小生成树的解决方法思路: 我们可以在这张图中找到一条权值最小的边1 —&gt;1—&gt; 2 那么我们来思考,最小生成树中是否一定包含权值最小的那一条边 答案是,一定...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"算法","slug":"算法","count":5,"path":"api/tags/算法.json"},{"name":"最小生成树","slug":"最小生成树","count":1,"path":"api/tags/最小生成树.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"网络流选讲","uid":"005d78720b9e835a238af502516610c0","slug":"网络流选讲","date":"2021-09-16T09:40:18.000Z","updated":"2021-09-16T12:28:07.781Z","comments":true,"path":"api/articles/网络流选讲.json","keywords":null,"cover":null,"text":"网络流选讲网络流定义 一个有向图，存在源点$S$和汇点$T$，每条边有一个流量，求从$S$到$T$最多能经过多少流量 $S \\in S’,T \\notin S’$​​,$E’ = (u,v) | u \\in S’,v \\notin S $​​​​ 最大流量 = 最小割 Ford-...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"知识点","slug":"知识点","count":14,"path":"api/tags/知识点.json"},{"name":"图论","slug":"图论","count":7,"path":"api/tags/图论.json"},{"name":"网络流","slug":"网络流","count":1,"path":"api/tags/网络流.json"}],"author":{"name":"TheLight","slug":"blog-author","avatar":"https://finallight.oss-cn-shanghai.aliyuncs.com/images/TheLight.jpg","link":"/","description":"There is TheLight's blog,Thanks for your exploring.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}